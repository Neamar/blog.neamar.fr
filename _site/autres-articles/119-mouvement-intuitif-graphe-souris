<!DOCTYPE html>
<html lang="en-gb" dir="ltr">
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta charset="utf-8" />
	<base href="https://blog.neamar.fr" />
	<meta name="keywords" content="graphe, algorithme, eulris" />
	<meta name="author" content="Neamar" />
	<meta name="description" content="Distributeur de liens !" />
	<meta name="generator" content="Joomla! - Open Source Content Management" />
	<title>Déplacement d'un joueur sur un graphe</title>
	<link href="https://blog.neamar.fr/autres-articles/119-mouvement-intuitif-graphe-souris" rel="canonical" />
	<link href="/templates/protostar/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
	<link href="/templates/protostar/css/template.css?4847224b99c9894da868618d8285f3c1" rel="stylesheet" />
	<link href="//fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
	<style>

	h1, h2, h3, h4, h5, h6, .site-title {
		font-family: 'Open Sans', sans-serif;
	}
	body.site {
		border-top: 3px solid #0088cc;
		background-color: #f4f6f7;
	}
	a {
		color: #0088cc;
	}
	.nav-list > .active > a,
	.nav-list > .active > a:hover,
	.dropdown-menu li > a:hover,
	.dropdown-menu .active > a,
	.dropdown-menu .active > a:hover,
	.nav-pills > .active > a,
	.nav-pills > .active > a:hover,
	.btn-primary {
		background: #0088cc;
	}
	</style>
	<script src="/media/jui/js/jquery.min.js"></script>
	<script src="/media/jui/js/jquery-noconflict.js"></script>
	<script src="/media/jui/js/jquery-migrate.min.js"></script>
	<script src="/media/system/js/caption.js"></script>
	<script src="/media/jui/js/bootstrap.min.js"></script>
	<script src="/templates/protostar/js/template.js?4847224b99c9894da868618d8285f3c1"></script>
	<script>
jQuery(window).on('load',  function() {
				new JCaption('img.caption');
			});jQuery(function($){ $(".hasTooltip").tooltip({"html": true,"container": "body"}); });
	</script>

	<!--[if lt IE 9]><script src="/media/jui/js/html5.js"></script><![endif]-->
</head>
<body class="site com_content view-article no-layout no-task itemid-103">
	<!-- Body -->
	<div class="body">
		<div class="container">
			<!-- Header -->
			<header class="header" role="banner">
				<div class="header-inner clearfix">
					<a class="brand pull-left" href="/">
						<span class="site-title" title="Blog de Neamar">Blog de Neamar</span>											</a>
					<div class="header-search pull-right">
						
					</div>
				</div>
			</header>
						
			<div class="row-fluid">
								<main id="content" role="main" class="span9">
					<!-- Begin Content -->
					
					<div id="system-message-container">
	</div>

					<div class="item-page" itemscope itemtype="https://schema.org/Article">
	<meta itemprop="inLanguage" content="en-GB" />
	
		
			<div class="page-header">
					<h2 itemprop="headline">
				Déplacement d'un joueur sur un graphe			</h2>
									</div>
							
<div class="icons">
	
					<div class="btn-group pull-right">
				<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span><span class="caret"></span> </a>
								<ul class="dropdown-menu">
																<li class="email-icon"> <a href="/component/mailto/?tmpl=component&amp;template=protostar&amp;link=9bc23c795416a22c80c248f447004c60ef66f008" title="Email this link to a friend" onclick="window.open(this.href,'win2','width=400,height=350,menubar=yes,resizable=yes'); return false;" rel="nofollow"><span class="icon-envelope"></span>Email</a> </li>
														</ul>
			</div>
		
	</div>
			
				<dl class="article-info muted">

		
			<dt class="article-info-term">
									Details							</dt>

							<dd class="createdby" itemprop="author" itemscope itemtype="https://schema.org/Person">
					Written by <span itemprop="name">Neamar</span>	</dd>
			
			
										<dd class="category-name">
													Category: <span itemprop="genre">Articles du blog</span>							</dd>			
					
												<dd class="create">
					<span class="icon-calendar"></span>
					<time datetime="2010-05-31T18:44:25+00:00" itemprop="dateCreated">
						Created: 31 May 2010					</time>
			</dd>			
										<dd class="modified">
				<span class="icon-calendar"></span>
				<time datetime="2013-08-06T23:18:27+00:00" itemprop="dateModified">
					Last Updated: 06 August 2013				</time>
			</dd>			
						</dl>
	
	
				
								<div itemprop="articleBody">
		<p>Je commence aujourd'hui <a href='http://neamar.fr/Res/Icosien/#Explications'>une petite série d'articles</a> en préparation <a href="http://neamar.fr/Res/Icosien">de mon nouveau jeu</a>. <br />
J'exposerai étape par étape les problèmes que j'ai rencontré et ma méthode de résolution. <br />
Comme d'habitude, je ne garantis en rien qu'elle soit optimale (au contraire même&nbsp;! ), et c'est tout juste si je garantis qu'elle fonctionne (mais j'ai tout de même fait assez de tests pour m'assurer de l'absence de bugs&nbsp;! ). </p>

<p>Pendant que j'y suis aussi, coupons court aux malentendus&nbsp;: il ne s'agit pas de D-Graphe, même si les apparences sont trompeuses et que l'on va travailler avec un graphe. <br />
Je donne le nom de code du jeu pour que les curieux tentent d'imaginer&nbsp;: mesdames et messieurs, préparez-vous à accueillir <strong>Eulris</strong> (normalement «&nbsp;eulrvis&nbsp;», mais c'est imprononçable sous nos latitudes)&nbsp;! </p>

<p>Dans cet article, nous ferons des maths (un peu), de l'algorithmie (plus), du debug (beaucoup) et de l'explication (encore plus). <br />
Comme d'habitude, je choisis comme support AS3, c'est assez souple pour le réimplémenter en ce que vous voulez. </p>

<p><span class="labelimage" style="float:right; border:1px solid gray; margin:5px"><span><img src="http://mathworld.wolfram.com/images/eps-gif/DoyleGraphLookalike_1000.gif" alt="Graphe de Doyle, MathWorld" title="Graphe de Doyle, MathWorld" style="background-color:white;" s><br />Graphe de Doyle, MathWorld</span></span></p>

<p><strong>Problématique</strong>&nbsp;: trouver un moyen agréable, intuitif et fonctionnel pour laisser un utilisateur parcourir un graphe (une figure de jeu). </p>

 <p><strong>Justification de la problématique</strong>&nbsp;: imaginez un jeu qui implique de parcourir un graphe, celui-là par exemple&nbsp;: </p>

<p>Vous placez votre joueur sur le nœud (rouge) tout en haut, et vous voulez qu'il puisse «&nbsp;parcourir&nbsp;» le graphe pour arriver en bas. </p>

<p>Quelles solutions vous viennent à l'esprit&nbsp;? </p>


<ul>
<li><p><strong>Au clavier</strong>&nbsp;: </p>

<ul>
	<li>Utiliser les touches directionnelles. Mais comment représenter les 360° de latitude que peuvent prendre les arêtes sortant du point&nbsp;? Ici il y en a 4, si on pose comme pré-requis que le nombre de «&nbsp;traits&nbsp;» sortants ne dépassera jamais 4, on peut attribuer à chacun une valeur directionnelle (haut, bas, gauche, droite) et laisser l'utilisateur faire. Les problèmes surviennent cependant rapidement&nbsp;: par exemple, si les quatre traits sont dirigés vers le bas, l'utilisateur aura du mal à établir une correspondance avec la touche haut. De même si les traits sortent en croix de St André (en diagonale)&nbsp;: l'extrémité partant en haut à gauche est-elle actionnée par l'appui vers gauche&nbsp;? vers haut&nbsp;? Bref, solution rejetée. </li>
	<li>Utiliser le pavé numérique, qui laisse 8 degrés de latitude. Mais on retombe sur les mêmes problèmes dans les cas limites&nbsp;! </li>
	<li>Placer un marqueur sur une arête (par exemple, d'angle le plus faible par rapport à l'horizontale) puis utiliser les touches gauche et droite pour sauter d'une arête. On perd ainsi la limite du nombre de traits sortants, mais on y perd aussi en ergonomie (il faut appuyer plusieurs fois sur une touche pour sélectionner la bonne arête). Gardons l'idée dans un coin de la tête.</li>
</ul>
</li>
<li><p><strong>À la souris</strong>&nbsp;: </p>

<ul>
	<li>Au clic&nbsp;: on clique sur une arête pour effectuer un déplacement du point de départ vers le point relié par l'arête cliquée. L'idée est bonne, mais nécessite des bonnes capacités de maniement de souris pour être rapide, et la détection d'arêtes qui se chevauchent (proches du point de départ) est problématique. </li>
	<li>Pathfinding. L'utilisateur clique simplement sur un nœud, et l'ordinateur se charge de calculer le chemin le plus court. C'est assez aisé avec les technologies modernes (une liste chaînée fait des merveilles sur un algorithme <a href="http://www.policyalmanac.org/games/aStarTutorial.htm">A*</a> brut)(encore que l'optimisation nécessite plus de réflexion, mais ici les nœuds sont peu nombreux ce qui limite le nombre de combinaisons à effectuer et donc la longueur du calcul). Le problème, c'est comment définir «&nbsp;chemin le plus court&nbsp;»&nbsp;? Intuitivement, on pense à la longueur des arêtes, mais est-ce vraiment le résultat voulu&nbsp;? Les cas sont nombreux ou la réponse est clairement non (encore une fois, cf. <a href="http://neamar. fr/CGraphe">C-Graphe</a> par exemple). </li>
</ul>
</li>
</ul>

<p>Personnellement, ce problème m'a bloqué pendant pas mal de temps (comprendre&nbsp;: ça a brisé mes élans de programmeur pour de nombreux mois&nbsp;; j'avais des bons concepts mais j'étais incapable de les réaliser). <br />
Et puis j'ai eu une idée très récemment, inspirée de l'<a href="http://fr.wikipedia.org/wiki/Marche_de_Jarvis">algorithme de Jarvis</a> (qui permet d'entourer un ensemble de points par une enveloppe). </p>

<p>Transplantée dans le monde réel, l'idée se résume en quelque mots. On prend une planche, on plante des clous à l'emplacement des nœuds. On accroche un bout de ficelle au clou de départ, puis on déroule la ficelle dans le plan de la planche. <br />
Clarification (on ne clique pas, on déplace juste la souris&nbsp;! )&nbsp;: </p>

<object type="application/x-shockwave-flash" data="/images/stories/Prog/EulrisGraphe/EulrisDemo.swf" width="200" height="200" style="margin:auto;">
	<param name="movie" value="/images/stories/Prog/EulrisGraphe/EulrisDemo.swf" />
	<param name="quality" value="high" />
	<param name="wmode" value="transparent" />
	<p>Installez le plugin Flash pour voir l'animation : <a href="http://www.adobe.com/go/gntray_dl_getflashplayer_fr" >Cliquez ici pour le télécharger</a></p>
</object>


<p>Bon, comme d'habitude le graphisme est négligé (mais pour le jeu final préparez-vous à un graphisme du feu de Dieu, <em>made in</em> <a href="http://licoti2.free.fr">Licoti</a> [qui travaille aussi sur la nouvelle version d'<a href="http://omnilogie.fr">Omnilogie</a> qui sortira sous peu, mais chut c'est un secret&nbsp;! ])</p>

<p>Donc plutôt que d'avoir des phrases qui divergent grossièrement («&nbsp;bite&nbsp;», celui qui comprend ce jeu de mot mal amené gagne un abonnement d'un an à mon blog), voyons les concepts derrière. </p>

<p>Et commençons par les choses qui fâchent, les mathématiques derrière. Histoire de ne pas perdre les lecteurs, je vais faire ça très court en vous présentant les deux seules fonctions techniques&nbsp;: </p>

<pre xml:lang="actionscript3">
/**
 * Calcule l'angle entre la droite formée par les deux points et l'horizontale.
 * Valeur de retour comprise entre 0 et 2PI.
 * Note : l'ordre des paramètres est important !
 * Note : utilise la fonction atan2. Cf. http://fr.wikipedia.org/wiki/Atan2
 * @param	P1 le premier point
 * @param	P2 le second point
 * @return l'angle (P1P2,x)
 */
protected function getAngle(P1:Point, P2:Point):Number
{
	var Angle:Number = -Math.atan2(P2.y - P1.y, P2.x - P1.x);
	if (Angle < 0)
		Angle += 2 * Math.PI;
	
	return Angle;
}

/**
 * Distance pythagoréenne entre deux points.
 * @param	P1 le premier point
 * @param	P2 le deuxième point
 * @return la distance calculée avec le théorème de Pythagore.
 */
protected function getDistance(P1:Point, P2:Point):Number
{
	return Math.sqrt(Math.pow(P1.x - P2.x, 2) + Math.pow(P1.y - P2.y, 2));
}

</pre>

<p>Et nous voilà partis&nbsp;! <br />
Plaçons le décor en examinant les acquis&nbsp;: on dispose d'une liste de points bien connus, de la position de la souris à tout instant, et de la liste des nœuds «&nbsp;accrochés&nbsp;». J'utiliserai souvent le terme <em>hook</em>, hameçon, pour désigner ces points d'accroches. <br />
Au démarrage, la liste ne contient que le premier nœud. </p>

<p>Ensuite, à chaque déplacement de souris il faut&nbsp;: </p>


<ul>
<li>Calculer la distance <span class="TexTexte">D</span> entre la souris et le dernier point d'accroche&nbsp;;</li>
<li>Calculer l'angle <span class="TexTexte">θ<sub>i</sub></span> (la direction en fait, puisqu'il est incohérent de parler d'angle entre deux points) entre la souris et le dernier point d'accroche, le <span class="TexTexte"><sub>i</sub></span> symbolise le fait qu'il s'agit de <span class="TexTexte">θ</span> à l'instant <span class="TexTexte">i</span>&nbsp;;</li>
<li>Récuperer tous les nœuds à une distance inférieure à <span class="TexTexte">d</span>&nbsp;: ce sont des points d'accroches potentiels.</li>
<li><p>Pour chacun de ces nœuds&nbsp;: </p>

<ul>
	<li>Calculer la direction <span class="TexTexte">φ</span> dernier point d'accroche / nœud actuellement comparé</li>
	<li>Si la direction <span class="TexTexte">φ</span> est comprise entre <span class="TexTexte">θ<sub>i</sub></span> et <span class="TexTexte">θ<sub>i-1</sub></span> alors on ajoute le nœud courant aux points d'accroche. </li>
</ul>
</li>
</ul>

<p>Et voilà, c'est tout pour la base. Le problème, c'est qu'il y a pas mal de petits détails à régler&nbsp;: </p>

<ul>
	<li>D'abord, pour résoudre l'inégalité avec <span class="TexTexte">φ</span> et <span class="TexTexte">θ</span>, il faut disposer des angles du plus petit au plus grand (c'est incohérent de tester <span class="TexTexte">5 &lt; φ &lt; 3</span>&nbsp;! )</li>
	<li>Ensuite, il y a le problème du «&nbsp;modulo <span class="TexTexte">2π</span>&nbsp;». Imaginons que <span class="TexTexte">φ = 0</span>, <span class="TexTexte">θ<sub>i</sub>=0.1</span> et <span class="TexTexte">θ<sub>i-1</sub>=2π-.1</span>. On se rend bien compte qu'il y aura là un problème qu'il faudra gérer… </li>
</ul>
<p>Tous les problèmes réglés, on obtient le code suivant. (Note&nbsp;: j'ai pré-calculé les angles <span class="TexTexte">φ</span> pour accélérer les calculs)</p>

<pre xml:lang="actionscript3">
//Déplacer le point représentant la souris
MousePos.x = mouseX;
MousePos.y = mouseY;

//Variables utiles aux calculs qui vont suivre
var DernierHook:Hook = getHook();
var AngleActuel:Number = getAngle(DernierHook.P, MousePos);
var AngleMin:Number = Math.min(AngleActuel, DernierAngle);
var AngleMax:Number = Math.max(AngleActuel, DernierAngle);
var Distance:Number = getDistance(DernierHook.P, MousePos);

if (AngleMax > 5 && AngleMin < 1)
{//On a tourné autour du cercle, il faut inverser les min et max et modifier l'angleMin pour ne pas avoir un saut de 2PI.
	var Swap:Number = AngleMax;
	AngleMax = AngleMin;
	AngleMin = Swap - 2 * Math.PI;
}

//Faut-il ajouter un hook ? Tester pour chacun des noeuds
for each(var Item:Position in Angles)
{
	//Si l'objet est différent du dernier hameçon (on ne s'accroche pas deux fois au même)
	//Que sa distance est inférieure à la distance de la souris
	//Et que l'angle est compris dans l'intervalle défini par les dernières mesures
	if (Item.P != DernierHook.P && Item.Distance < Distance && Item.Angle >= AngleMin && Item.Angle <= AngleMax)
	{//On a trouvé un hameçon !
		addHook(Item.P, (Item.Angle),0);
	}
}

//Enregistrer et dessiner.
DernierAngle = AngleActuel;
drawShape();
</pre>

<p>Et le résultat&nbsp;: </p>

<object type="application/x-shockwave-flash" data="/images/stories/Prog/EulrisGraphe/EulrisAdd.swf" width="200" height="200" >
	<param name="movie" value="/images/stories/Prog/EulrisGraphe/EulrisAdd.swf" />
	<param name="quality" value="high" />
	<param name="wmode" value="transparent" />
	<p>Installez le plugin Flash pour voir l'animation : <a href="http://www.adobe.com/go/gntray_dl_getflashplayer_fr" >Cliquez ici pour le télécharger</a></p>
</object>

<p>Mais là, on ne gère pas le décrochage d'un hameçon… <br />
Pour cela, il va falloir enregistrer l'angle que fait la corde au moment de s'enrouler avec le nœud, mais aussi le sens dans lequel elle arrive (grossièrement, si elle arrive à gauche ou à droite). Arbitrairement, j'ai pris -1 pour le sens horaire et 1&nbsp;pour le sens trigonométrique. </p>

<p>On ajoute donc la variable suivante dans le bloc de déclaration&nbsp;: </p>

<pre xml:lang="actionscript3">
var Sens:int = (AngleActuel > DernierAngle)?1: -1;//Sens trigo // anti trigo
</pre>

<p>Il faut aussi penser à inverser le sens de rotation dans le petit <tt>if</tt> qui teste pour savoir si on a fait un tour (auquel cas on passera <tt>Sens = -Sens</tt>). </p>

<p>Et enfin, après la boucle pour l'ajout on ajoute une boucle pour la suppression&nbsp;: </p>

<pre xml:lang="actionscript3">
//Faut-il enlever un hook ?
while(DernierHook.Sens != Sens && DernierHook.Angle >=AngleMin && DernierHook.Angle<=AngleMax)
{
	if(removeHook())
		DernierHook = getHook();
}
</pre>

<p>Et on obtient ainsi l'animation montrée plus haut. </p>

<p>Comme vous le voyez, en choisissant des primitives «&nbsp;intelligentes&nbsp;» (<tt>addHook()</tt>, <tt>removeHook()</tt>, <tt>getHook()</tt>, <tt>getAngle()</tt>, <tt>drawShape()</tt>) on peut se concentrer uniquement sur l'agorithmie et oublier les implémentations techniques. </p>

<p>Les curieux pourront <a href="http://blog.neamar.fr/Telechargement/EulrisDeplacement.zip">télécharger le code</a>, compilable <a href="http://neamar.fr/Res/Compiler_AS3/">même sans l'IDE d'Adobe</a>. Comme d'habitude, il est relativement commenté et devrait être compréhensible. </p>	</div>

	
							</div>

					
<ul itemscope itemtype="https://schema.org/BreadcrumbList" class="breadcrumb">
			<li>
			You are here: &#160;
		</li>
	
				<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
									<a itemprop="item" href="/" class="pathway"><span itemprop="name">Home</span></a>
				
									<span class="divider">
						<img src="/media/system/images/arrow.png" alt="" />					</span>
								<meta itemprop="position" content="1">
			</li>
					<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
									<a itemprop="item" href="/autres-articles" class="pathway"><span itemprop="name">Articles du blog</span></a>
				
									<span class="divider">
						<img src="/media/system/images/arrow.png" alt="" />					</span>
								<meta itemprop="position" content="2">
			</li>
					<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem" class="active">
				<span itemprop="name">
					Déplacement d'un joueur sur un graphe				</span>
				<meta itemprop="position" content="3">
			</li>
		</ul>

					<!-- End Content -->
				</main>
									<div id="aside" class="span3">
						<!-- Begin Right Sidebar -->
						<div class="well _menu"><h3 class="page-header">Main Menu</h3><ul class="nav menu">
<li class="item-104 default"><a href="/" >Blog de Neamar</a></li><li class="item-103 current active"><a href="/autres-articles" >Articles du blog</a></li><li class="item-105"><a href="/les-liens-du-jeudi" >Les liens du jeudi</a></li></ul>
</div>
						<!-- End Right Sidebar -->
					</div>
							</div>
		</div>
	</div>
	<!-- Footer -->
	<footer class="footer" role="contentinfo">
		<div class="container">
			<hr />
			
			<p class="pull-right">
				<a href="#" id="back-top">
					Back to Top				</a>
			</p>
			<p>
				&copy; 2024 Blog de Neamar			</p>
		</div>
	</footer>
	
</body>
</html>
