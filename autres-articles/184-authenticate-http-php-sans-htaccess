<!DOCTYPE html>
<html lang="en-gb" dir="ltr">
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta charset="utf-8" />
	<base href="https://blog.neamar.fr" />
	<meta name="author" content="Neamar" />
	<meta name="description" content="Distributeur de liens !" />
	<meta name="generator" content="Joomla! - Open Source Content Management" />
	<title>Une authentification HTTP tout en PHP</title>
	<link href="https://blog.neamar.fr/autres-articles/184-authenticate-http-php-sans-htaccess" rel="canonical" />
	<link href="/templates/protostar/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
	<link href="/templates/protostar/css/template.css?4847224b99c9894da868618d8285f3c1" rel="stylesheet" />
	<link href="//fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
	<style>

	h1, h2, h3, h4, h5, h6, .site-title {
		font-family: 'Open Sans', sans-serif;
	}
	body.site {
		border-top: 3px solid #0088cc;
		background-color: #f4f6f7;
	}
	a {
		color: #0088cc;
	}
	.nav-list > .active > a,
	.nav-list > .active > a:hover,
	.dropdown-menu li > a:hover,
	.dropdown-menu .active > a,
	.dropdown-menu .active > a:hover,
	.nav-pills > .active > a,
	.nav-pills > .active > a:hover,
	.btn-primary {
		background: #0088cc;
	}
	</style>
	<script src="/media/jui/js/jquery.min.js"></script>
	<script src="/media/jui/js/jquery-noconflict.js"></script>
	<script src="/media/jui/js/jquery-migrate.min.js"></script>
	<script src="/media/system/js/caption.js"></script>
	<script src="/media/jui/js/bootstrap.min.js"></script>
	<script src="/templates/protostar/js/template.js?4847224b99c9894da868618d8285f3c1"></script>
	<script>
jQuery(window).on('load',  function() {
				new JCaption('img.caption');
			});jQuery(function($){ $(".hasTooltip").tooltip({"html": true,"container": "body"}); });
	</script>

	<!--[if lt IE 9]><script src="/media/jui/js/html5.js"></script><![endif]-->
</head>
<body class="site com_content view-article no-layout no-task itemid-103">
	<!-- Body -->
	<div class="body">
		<div class="container">
			<!-- Header -->
			<header class="header" role="banner">
				<div class="header-inner clearfix">
					<a class="brand pull-left" href="/">
						<span class="site-title" title="Blog de Neamar">Blog de Neamar</span>											</a>
					<div class="header-search pull-right">
						
					</div>
				</div>
			</header>
						
			<div class="row-fluid">
								<main id="content" role="main" class="span9">
					<!-- Begin Content -->
					
					<div id="system-message-container">
	</div>

					<div class="item-page" itemscope itemtype="https://schema.org/Article">
	<meta itemprop="inLanguage" content="en-GB" />
	
		
			<div class="page-header">
					<h2 itemprop="headline">
				Une authentification HTTP tout en PHP			</h2>
									</div>
							
<div class="icons">
	
					<div class="btn-group pull-right">
				<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span><span class="caret"></span> </a>
								<ul class="dropdown-menu">
																<li class="email-icon"> <a href="/component/mailto/?tmpl=component&amp;template=protostar&amp;link=86a0699c7e77ed6345a2d7835ae0200554064e5e" title="Email this link to a friend" onclick="window.open(this.href,'win2','width=400,height=350,menubar=yes,resizable=yes'); return false;" rel="nofollow"><span class="icon-envelope"></span>Email</a> </li>
														</ul>
			</div>
		
	</div>
			
				<dl class="article-info muted">

		
			<dt class="article-info-term">
									Details							</dt>

							<dd class="createdby" itemprop="author" itemscope itemtype="https://schema.org/Person">
					Written by <span itemprop="name">Neamar</span>	</dd>
			
			
										<dd class="category-name">
													Category: <span itemprop="genre">Articles du blog</span>							</dd>			
					
												<dd class="create">
					<span class="icon-calendar"></span>
					<time datetime="2010-07-22T14:13:23+00:00" itemprop="dateCreated">
						Created: 22 July 2010					</time>
			</dd>			
										<dd class="modified">
				<span class="icon-calendar"></span>
				<time datetime="2013-08-06T23:18:27+00:00" itemprop="dateModified">
					Last Updated: 06 August 2013				</time>
			</dd>			
						</dl>
	
	
				
								<div itemprop="articleBody">
		<p>Aujourd'hui, nous allons réaliser une authentification HTTP directement depuis PHP, sans passer par un système de .htpasswd. <br />
Pour ceux qui ne connaîtraient pas le terme, l'authentification HTTP c'est cette petite fenêtre qui s'affiche pour demander le login / mdp d'une personne et déterminer si elle peut consulter la page. <br />
Habituellement, on réalise cela directement avec un module d'Apache&nbsp;: on indique que tel fichier doit être protégé, avec des options relativement poussées&nbsp;: pour chaque fichier / répertoire, on peut indiquer que l'accès nécessite une authentification, ou plus restrictif l'appartenance à un groupe. </p>

<p>Il s'agit d'une option utile, mais malheureusement un peu limitée&nbsp;: que faire par exemple dans le cas d'un URLRewriting qui fait tout pointer vers un même fichier, du type <tt>index.php?Page=PAGEDEMANDÉE</tt>&nbsp;? Il y a bien <a href="http://httpd.apache.org/docs/2.0/mod/core.html#location">une option pour cela</a>, mais elle n'est pas accessible depuis les fichiers .htaccess… <br />
Plus intéressant encore, que faire si on a aussi un module de login standard réalisé par un formulaire HTML&nbsp;? Imaginez un admin qui se connecte depuis l'interface membre, puis veut rejoindre la partie admin du site protégée par identification HTTP&nbsp;: pourquoi devrait-il se reconnecter une nouvelle fois alors qu'il est déjà loggé&nbsp;? <br />
Enfin, la gestion des utilisateurs imposée par Apache n'est pas facile à maintenir puisqu'elle nécessite un fichier spécial (souvent nommé .htpasswd)&nbsp;: cette solution permet de s'affranchir de cette contrainte et d'utiliser un sytème de login avec une base de données / un service distant / ce qui vous plaît : c'est quand même plus évolutif !</p>

 

<p>Ici, je vais décrire un système d'authentification relativement basique&nbsp;; de mon côté j'y ai adjoint un module simulant la gestion des membres et la gestions des accès DIGEST plus sécurisés. Libre à vous de vous renseigner si cela vous intéresse… </p>

<h2>Pré-requis</h2>
<p>Pour réaliser ce module, il vous faudra bien évidemment un serveur Apache. Il faudra aussi la possibilité de créer un fichier .htaccess et d'utiliser des RewriteRule pour contourner un problème lorsque PHP est installé en tant que script CGI – j'en reparle plus loin. </p>

<h2>La théorie</h2>
<p>Pour comprendre comment ce module fonctionne, il faut comprendre la théorie derrière. <br />
Lorsqu'un navigateur demande à accéder à une page protégée, le serveur renvoie deux headers spécifiques&nbsp;: </p>

<pre>
HTTP/1.1 401 Authorization Required
WWW-Authenticate: Basic realm="Pages protégées"
</pre>

<p>Le premier indique que la page nécessite une autorisation (code HTTP 401), le second indique de quelle façon on doit procéder à l'authentification. Deux méthodes existents&nbsp;: l'authentification <tt>Basic</tt> – qui comme son nom l'indique, est simple à mettre en œuvre mais non protégée – et l'authentification <tt>Digest</tt>, plus complexe à réaliser mais plus sécurisée puisque le mot de passe ne transite pas en clair sur le réseau. La partie «&nbsp;realm&nbsp;» indique le texte qui sera affiché à l'utilisateur sur la boîte de login&nbsp;: </p>

<p><img src="http://blog.neamar.fr/images/stories/Prog/AuthHTTP/Auth.png" alt="Exemple sous Firefox" title="Exemple sous Firefox" style="width:600px;"></p>

<p>Une fois ces deux headers envoyés, le serveur renvoie la page qui sera affichée si l'authentification échoue&nbsp;; dans notre cas nous nous contenterons d'un texte sybillin «&nbsp;authentification échouée&nbsp;». <br />
De son côté, le navigateur, à la réception de ces headers, affiche une boîte de dialogue de connexion (le style change avec les navigateurs). Une fois ces données envoyées, le navigateur refait une demande pour consulter la page, en y ajoutant un header <tt>Authorization</tt> qui contient le login et le mot de passe encodé. Attention, encodé ne signifie pas crypté&nbsp;! Comme je le disais, dans le cas d'une authentification de type <tt>Basic</tt>, il s'agit simplement de la concaténation du login, du symbole deux points et du mot de passe encodé en base 64&nbsp;: ainsi, pour un pseudo «&nbsp;monlogin&nbsp;» et un mot de passe «&nbsp;monmdp&nbsp;», la chaîne «&nbsp;monlogin:monmdp&nbsp;» est encodée en base 64 (bW9ubG9naW46bW9ubWRw) puis ajoutée dans le header <tt>Authorization</tt>. </p>

<p>Retour au serveur maintenant, qui reçoit cette nouvelle demande. Il va la traiter, la comparer à une liste de couple login / mdp, puis l'accepter ou la refuser (le refus passant par le nouvel envoi des deux headers 401 et <tt>WWW-Authenticate</tt>). </p>

<h2>Ce qu'il va falloir faire</h2>
<p>Dans le cas qui nous intéresse, nous ne nous soucierons pas du côté navigateur puisque leurs concepteurs ont déjà codé ce côté. <br />
Voici les étapes à faire côté serveur&nbsp;: </p>

<ul>
	<li>demander une authentification</li>
	<li>récupérer le header renvoyé par le navigateur en réponse à notre question</li>
	<li>le comparer à une liste d'utilisateurs autorisés et agir en conséquence. </li>
</ul>

<p>Le second point (récupération du header envoyé) ne va pas être si facile&nbsp;: en effet, si PHP est chargé non comme un module Apache mais comme un script CGI (ce qui est le cas dans la plupart des solutions mutualisées), il n'a plus accès aux headers envoyés par le navigateur effectuant la requête. Vous ne me croyez pas&nbsp;? Et pourtant, testez donc les fonctions <a href="http://fr2.php.net/manual/fr/function.httpmessage-getheaders.php">getheaders()</a>, <a href="http://fr.php.net/headers_list">headers_list()</a> ou <a href="http://fr.php.net/manual/en/function.apache-request-headers.php">apache_request_headers()</a>&nbsp;: si PHP est installé en script CGI, vous aurez droit à une belle erreur. <br />
Comment contourner ce problème&nbsp;? Avec le .htaccess pardi&nbsp;! Car lui est exécuté en tant que module Apache et a donc accès à toutes ces informations. Le plus simple consiste donc à créer une règle de réécriture qui se contente d'ajouter une variable d'environnement contenant la valeur d'<tt>Authorization</tt> et qui sera elle disponible depuis votre script&nbsp;: </p>


<pre xml:lang="apache">
#--------------------------------------------------
#Récupération du Header authenticate pour les pages d'administration
#--------------------------------------------------
RewriteRule ^administrator/(.*) - [E=LOGIN:%{HTTP:Authorization}]
</pre>

<p>Ici, je n'ajoute cette variable que pour les pages qui commencent par /adminstrator/, mais vous pouvez l'ajouter pour toutes vos pages si cela vous chante. Ensuite, j'indique le nom de la clé (<tt>LOGIN</tt>) et sa valeur (<tt>%{HTTP:Authorization}</tt>), qui correspond vous l'aurez deviné si vous avez déjà fait un peu de scripting au contenu du header <tt>Authorization</tt>.</p>

<p>Bien, nous avons maintenant tout ce qu'il nous faut pour créer la base&nbsp;: faisons donc un module qui demande un login / mdp à l'utilisateur, puis affiche la page une fois ces données entrées (mais sans rien vérifier, cela viendra plus tard). </p>

<p>J'en profite pour faire une note importante&nbsp;: dans mon cas, le fichier .htaccess ne crée pas directement une clé <tt>LOGIN</tt> dans le tableau <tt>$_SERVER</tt>, mais une clé <tt>REDIRECT_REDIRECT_LOGIN</tt> pour des raisons qui me restent inconnues. N'hésitez donc pas à vérifier que votre serveur fonctionne de la même manière, par exemple en consultant le résultat d'un <tt>print_r($_SERVER)</tt> depuis une page concernée par la règle du .htaccess. </p>


<pre xml:lang="php">
/**
* But : réaliser une authentification HTTP en n'utilisant que PHP (sans passer par le .htaccess de Apache)
* Cette classe nécessite l'adjonction d'une règle dans le fichier .htaccess réglementant l'accès aux pages protégées :
* RewriteRule regexp_pages_protegees - [E=LOGIN:%{HTTP:Authorization}]
* @example
* //Depuis une page qui doit être protégée :
* Authenticate::login()
*
* //Suite du script, si l'authentification a échoué la fonction ne retournera jamais et cette partie ne sera pas exécutée.
*/
//Authenticate

class Authenticate
{
	/**
	* Le nombre d'essais tolérés avant de bannir l'utilisateur.
	* Attention, le ban fonctionne avec le système des sessions et il suffit donc de vider ses cookies pour rebénéficier de trois essais, n'hésitez pas à implémentez un ban par IP si la sécurité vous tient à coeur.
	*/
	const NB_ESSAIS_AVANT_BAN = 3;

	/**
	* Tente de connecter l'utilisateur qui veut voir la page.
	* Utilise une authentification HTTP.
	* @return :boolean true si l'identification a fonctionné ; si elle échoue le script s'arrête.
	*/
	public static function login(array $roles)
	{
		//Est-on connecté ?
		if(empty($_SERVER['REDIRECT_REDIRECT_LOGIN']))
			self::askForLogin();

		//Récupérer les infos de connexion entrées :
		$Login = base64_decode(substr($_SERVER['REDIRECT_REDIRECT_LOGIN'],5));

		$Infos = explode(':',$Login,2);//Limiter à 2 "explode" pour les mots de passe contenant le symbole ":".

		//À ce moment, $Infos est un tableau à deux valeurs : l'index 0 contient le login entré, et l'index 1 le mot de passe en clair.


		//************************************************************************
		//Suite du traitement... dans la suite de l'article !
		//************************************************************************

		//Fin de l'identification !
		return true;
	}

	/**
	* Envoie les headers demandant la connexion du visiteur.
	* Bloque après self::NB_ESSAIS_AVANT_BAN essais infructueux.
	*/
	private static function askForLogin()
	{
		if(!isset($_SESSION['NbEssaiConnexion']))
			$_SESSION['NbEssaiConnexion']=0;

		$_SESSION['NbEssaiConnexion']++;

		if($_SESSION['NbEssaiConnexion'] > self::NB_ESSAIS_AVANT_BAN && 0)
			exit("Bon, soyons franc... t'as aucune idée du mot de passe ! Passe ton chemin, le site a des pages intéressantes même quand on n'est pas admin ;)");
		else
		{
			header('HTTP/1.1 401 Authorization Required');
			header('WWW-Authenticate: Basic realm="Pages protégées"');

			exit("L'accès à ces pages est protégé.");
		}
	}
}
</pre>
<p>Et pour appeler cette fonction depuis une page à protéger, on utilisera&nbsp;: </p>

<pre xml:lang="php">
Authenticate::login()
//Suite du script, si l'authentification a échoué la fonction ne retournera jamais et cette partie ne sera pas exécutée.
</pre>

<h2>Vérification de l'utilisateur</h2>
<p>Notre script est certes fonctionnel, mais son utilité est limitée. Il faut maintenant comparer les valeurs entrées (et temporairement stockées dans <tt>$Infos</tt>) avec une liste de valeurs pré-stockées. Toutes les solutions se valent&nbsp;: vous pouvez vérifier que l'utilisateur existe dans votre base de données, dans un fichier, sur un site externe… pour ma part, je vais garder la solution d'Apache pour une plus grande compatibilité (je peux rebasculer sur un système standard sans modifier mes utilisateurs). </p>

<p>Nous allons donc créer un fichier qui contient sur chaque ligne un utilisateur, suivi du caractère «&nbsp;:&nbsp;» et du résultat de la fonction <a href="http://fr.php.net/crypt">crypt()</a> appliquée au mot de passe. </p>

<p>Exemple&nbsp;: </p>
<pre>
unmembre:$1$clFQ3b8L$x2UCNXH6orWwjjTPBTy901
unautremembre:$1$tbPau6wb$hUBhFBZXC5RgxSUiU8yCf.
encoreunmembre:$1$KOV/gGi8$HnfwhPz.aPT8iUdRIQ4RF1
</pre>
<h3>Petite note sur la fonction crypt()</h3>
<p>Il faut préciser que crypt est une fonction à sens unique&nbsp;; il est strictement impossible de remonter à la valeur originale depuis le résultat. Ainsi, si votre fichier venait à être volé ou hacké, le pirate ne pourrait absolument rien faire des données (sauf en déduire le nom des utilisateurs associés à votre système, ce qui n'est quand même pas négligeable). </p>

<p>Il est intéressant de constater que crypt renvoie un résultat différent à chaque fois. Essayez le code suivant&nbsp;: </p>

<pre xml:lang="php">
echo crypt('lol');//$1$m1Mw4kay$btjntvPUq.sUZdFGyhxUH/
echo crypt('lol');//$1$kIPmctOo$kO82XwbkFa7pNW5QKxRNR0
echo crypt('lol');//$1$VqxN3L6j$pjAhEtlKSpqRAz2bHv/CI.
</pre>

<p>En fait, c'est parce qu'un grain de sel (salt) est généré à chaque fois pour augmenter l'entropie du résultat et améliorer encore la sécurité. Mais, me direz vous, dans ce cas comment savoir si la valeur entrée par l'utilisateur est correcte puisqu'on ne pourra pas comparer <tt>if(crypt($mdp) == $valeur_du_fichier)</tt>&nbsp;? C'est une très bonne question qui m'a moi aussi embêté, avant que je ne découvre (aidé par K-Lu) que le sel utilisé était stocké dans la valeur cryptée, et ce sur les deux premiers caractères. Et ça tombe bien&nbsp;: la fonction crypt() prend un deuxième argument qui permet de forcer l'utilisation d'un sel spécifique, et qui dans l'algorithme qui nous intéresse (chiffrement DES standard) se concentre sur les deux premiers caractères. Autrement dit, notre test sera (accrochez-vous bien&nbsp;!)&nbsp;: <tt>if(crypt($mdp,$valeur_du_fichier) == $valeur_du_fichier)</tt>&nbsp;: si la valeur entrée cryptée avec le même sel que la valeur en mémoire correspond à la valeur en mémoire, alors le mot de passe est correct. C'est tordu, n'hésitez pas à relire ce paragraphe et la documentation de la fonction… ou à laisser tomber et appliquer bêtement&nbsp;;)</p>

<p>Cette particularité nous empêche cependant de faire un simple rechercher dans le fichier, il va falloir récupérer tous les couples disponibles et faire le test. </p>
<p>Nous allons donc ajouter une constante à notre classe, qui contiendra l'URL vers le fichier contenant les utilisateurs autorisés&nbsp;: </p>


<pre xml:lang="php">
/**
* Chemin vers le fichier contenant les différents membres, au format apache (i.e. login:mdp_crypté)
* NOTE: Le chemin n'est pas obligatoirement absolu !
* NOTE: Pensez à empêcher le visionnage de ce fichier depuis un navigateur !
*/
const ADMINS="/homepages/htdocs/administrator/.htpasswd";
?>
</pre>

<p>Puis c'est du code tout bête (à insérer à la suite du premier code, en lieu et place du <tt>//Suite du traitement... dans la suite de l'article !</tt>) :</p>

<pre xml:lang="php">
//Récupérer tous les utilisateurs dans un tableau ;
$Liste = file(self::ADMINS,FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

foreach($Liste as $Membre)
{
	if($Membre[0]=='#')
		continue;//Sauter les commentaires

	//Récupérer le couple login / mdp
	$Membre = explode(':',$Membre);
	if($Membre[0]==$Infos[0])
		break;
}

//A-t-il entré le bon mot de passe ?
//Pour cela, on crypte en salant avec le hash en mémoire, et on compare avec ce même hash : les résultats doivent être similaires.
//Pour rappel :
//$Infos[0] = login entré, $Infos[1] = mdp entré ; $Membre[0] = membre du fichier, $Membre[1] = mdp du fichier
if($Membre[0]==$Infos[0] && crypt($Infos[1],$Membre[1])==$Membre[1])
	$_SERVER['REMOTE_USER'] = $Infos[0];//C'est correct, placer une variable retenant le membre.
else
	self::askForLogin();//C'est un échec, redemander l'authentification
</pre>
<p>Vous aurez noté que pour plus de souplesse, j'ai autorisé les lignes vides et les commentaires (#) dans le fichier, toujours pour rester compatible avec la solution Apache par défaut. De même, en cas de succès je crée une ligne dans le tableau $_SERVER contenant le membre connecté (c'est encore une fois le comportement qu'aurait Apache avec une authentification standard). </p>

<p>Et voilà, nous avons notre module fonctionnel. N'hésitez pas à y adjoindre une gestion des groupes et de l'authentification Digest&nbsp;! </p>

<p>Le code complet&nbsp;: </p>

<pre xml:lang="php">
/**
* But : réaliser une authentification HTTP en n'utilisant que PHP (sans passer par le .htaccess de Apache)
* Cette classe nécessite l'adjonction d'une règle dans le fichier .htaccess réglementant l'accès aux pages protéges :
* RewriteRule regexp_pages_protegees - [E=LOGIN:%{HTTP:Authorization}]
* @example
* //Depuis une page qui doit être protégée :
* Authenticate::login()
*
* //Suite du script, si l'authentification a échoué la fonction ne retournera jamais et cette partie ne sera pas exécutée.
*/
//Authenticate

class Authenticate
{
	/**
	* Chemin vers le fichier contenant les différents membres, au format apache (i.e. login:mdp_crypté)
	*/
	const ADMINS="/homepages/38/d222425658/htdocs/Omnilogie/admin/raw/.admin";

	/**
	* Le nombre d'essais tolérés avant de bannir l'utilisateur.
	* Attention, le ban fonctionne avec le système des sessions et il suffit donc de vider ses cookies pour rebénéficier de trois essais, n'hésitez pas à implémentez un ban par IP si la sécurité vous tient à coeur.
	*/
	const NB_ESSAIS_AVANT_BAN = 3;

	/**
	* Tente de connecter l'utilisateur qui veut voir la page.
	* Utilise une authentification HTTP.
	* @return :boolean true si l'identification a fonctionné ; si elle échoue le script s'arrête.
	*/
	public static function login(array $roles)
	{
		//Est-on connecté ?
		if(empty($_SERVER['REDIRECT_REDIRECT_LOGIN']))
			self::askForLogin();

		//Récupérer les infos de connexion entrées :
		$Login = base64_decode(substr($_SERVER['REDIRECT_REDIRECT_LOGIN'],5));

		$Infos = explode(':',$Login,2);

		//Récupérer le mot de passe de l'utilisateur :
		$Liste = file(self::ADMINS,FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
		foreach($Liste as $Membre)
		{
			if($Membre[0]=='#')
				continue;//Sauter les commentaires

			$Membre = explode(':',$Membre);
			if($Membre[0]==$Infos[0])
				break;
		}

		//A-t-il entré le bon mot de passe ?
		//Pour cela, on crypte en salant avec le hash en mémoire, et on compare avec ce même hash : les résultats doivent être similaires.
		if($Membre[0]==$Infos[0] && crypt($Infos[1],$Membre[1])==$Membre[1])
			$_SERVER['REMOTE_USER'] = $Infos[0];
		else
			self::askForLogin();

		//Fin de l'identification !
		return true;
	}

	/**
	* Envoie les headers demandant la connexion du visiteur.
	* Bloque après self::NB_ESSAIS_AVANT_BAN essais infructueux.
	*/
	private static function askForLogin()
	{
		if(!isset($_SESSION['NbEssaiConnexion']))
			$_SESSION['NbEssaiConnexion']=0;

		$_SESSION['NbEssaiConnexion']++;

		if($_SESSION['NbEssaiConnexion'] > self::NB_ESSAIS_AVANT_BAN && 0)
			exit("Bon, soyons franc... t'as aucune idée du mot de passe ! Passe ton chemin, le site a des pages intéressantes même quand on n'est pas admin ;)");
		else
		{
			header('HTTP/1.1 401 Authorization Required');
			header('WWW-Authenticate: Basic realm="Pages protégées"');

			exit("L'accès à ces pages est protégé.");
		}
	}
}
</pre>

<p>Bonnes authentifications ;)</p>	</div>

	
							</div>

					
<ul itemscope itemtype="https://schema.org/BreadcrumbList" class="breadcrumb">
			<li>
			You are here: &#160;
		</li>
	
				<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
									<a itemprop="item" href="/" class="pathway"><span itemprop="name">Home</span></a>
				
									<span class="divider">
						<img src="/media/system/images/arrow.png" alt="" />					</span>
								<meta itemprop="position" content="1">
			</li>
					<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
									<a itemprop="item" href="/autres-articles" class="pathway"><span itemprop="name">Articles du blog</span></a>
				
									<span class="divider">
						<img src="/media/system/images/arrow.png" alt="" />					</span>
								<meta itemprop="position" content="2">
			</li>
					<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem" class="active">
				<span itemprop="name">
					Une authentification HTTP tout en PHP				</span>
				<meta itemprop="position" content="3">
			</li>
		</ul>

					<!-- End Content -->
				</main>
									<div id="aside" class="span3">
						<!-- Begin Right Sidebar -->
						<div class="well _menu"><h3 class="page-header">Main Menu</h3><ul class="nav menu">
<li class="item-104 default"><a href="/" >Blog de Neamar</a></li><li class="item-103 current active"><a href="/autres-articles" >Articles du blog</a></li><li class="item-105"><a href="/les-liens-du-jeudi" >Les liens du jeudi</a></li></ul>
</div>
						<!-- End Right Sidebar -->
					</div>
							</div>
		</div>
	</div>
	<!-- Footer -->
	<footer class="footer" role="contentinfo">
		<div class="container">
			<hr />
			
			<p class="pull-right">
				<a href="#" id="back-top">
					Back to Top				</a>
			</p>
			<p>
				&copy; 2024 Blog de Neamar			</p>
		</div>
	</footer>
	
</body>
</html>
