<!DOCTYPE html>
<html lang="en-gb" dir="ltr">
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta charset="utf-8" />
	<base href="https://blog.neamar.fr" />
	<meta name="keywords" content="algorithme, optimisation, c++, nombre premier" />
	<meta name="author" content="Neamar" />
	<meta name="description" content="Distributeur de liens !" />
	<meta name="generator" content="Joomla! - Open Source Content Management" />
	<title>Blog de Neamar</title>
	<link href="https://blog.neamar.fr/component/content/article/4-web-pour-webmaster/97-test-primalite-rapide-c-c" rel="canonical" />
	<link href="/templates/protostar/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
	<link href="/templates/protostar/css/template.css?4847224b99c9894da868618d8285f3c1" rel="stylesheet" />
	<link href="//fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
	<style>

	h1, h2, h3, h4, h5, h6, .site-title {
		font-family: 'Open Sans', sans-serif;
	}
	body.site {
		border-top: 3px solid #0088cc;
		background-color: #f4f6f7;
	}
	a {
		color: #0088cc;
	}
	.nav-list > .active > a,
	.nav-list > .active > a:hover,
	.dropdown-menu li > a:hover,
	.dropdown-menu .active > a,
	.dropdown-menu .active > a:hover,
	.nav-pills > .active > a,
	.nav-pills > .active > a:hover,
	.btn-primary {
		background: #0088cc;
	}
	</style>
	<script src="/media/jui/js/jquery.min.js"></script>
	<script src="/media/jui/js/jquery-noconflict.js"></script>
	<script src="/media/jui/js/jquery-migrate.min.js"></script>
	<script src="/media/system/js/caption.js"></script>
	<script src="/media/jui/js/bootstrap.min.js"></script>
	<script src="/templates/protostar/js/template.js?4847224b99c9894da868618d8285f3c1"></script>
	<script>
jQuery(window).on('load',  function() {
				new JCaption('img.caption');
			});jQuery(function($){ $(".hasTooltip").tooltip({"html": true,"container": "body"}); });
	</script>

	<!--[if lt IE 9]><script src="/media/jui/js/html5.js"></script><![endif]-->
</head>
<body class="site com_content view-article no-layout no-task">
	<!-- Body -->
	<div class="body">
		<div class="container">
			<!-- Header -->
			<header class="header" role="banner">
				<div class="header-inner clearfix">
					<a class="brand pull-left" href="/">
						<span class="site-title" title="Blog de Neamar">Blog de Neamar</span>											</a>
					<div class="header-search pull-right">
						
					</div>
				</div>
			</header>
						
			<div class="row-fluid">
								<main id="content" role="main" class="span9">
					<!-- Begin Content -->
					
					<div id="system-message-container">
	</div>

					<div class="item-page" itemscope itemtype="https://schema.org/Article">
	<meta itemprop="inLanguage" content="en-GB" />
	
		
			<div class="page-header">
					<h2 itemprop="headline">
				Déterminer si un nombre est premier : d'optimisation en optimisation			</h2>
									</div>
							
<div class="icons">
	
					<div class="btn-group pull-right">
				<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span><span class="caret"></span> </a>
								<ul class="dropdown-menu">
																<li class="email-icon"> <a href="/component/mailto/?tmpl=component&amp;template=protostar&amp;link=1d61c06648a7e6e0d66c83c9ec3563c1b2bd757a" title="Email this link to a friend" onclick="window.open(this.href,'win2','width=400,height=350,menubar=yes,resizable=yes'); return false;" rel="nofollow"><span class="icon-envelope"></span>Email</a> </li>
														</ul>
			</div>
		
	</div>
			
				<dl class="article-info muted">

		
			<dt class="article-info-term">
									Details							</dt>

							<dd class="createdby" itemprop="author" itemscope itemtype="https://schema.org/Person">
					Written by <span itemprop="name">Neamar</span>	</dd>
			
			
										<dd class="category-name">
													Category: <span itemprop="genre">Articles du blog</span>							</dd>			
					
												<dd class="create">
					<span class="icon-calendar"></span>
					<time datetime="2010-03-27T09:36:59+00:00" itemprop="dateCreated">
						Created: 27 March 2010					</time>
			</dd>			
										<dd class="modified">
				<span class="icon-calendar"></span>
				<time datetime="2018-01-14T01:15:28+00:00" itemprop="dateModified">
					Last Updated: 14 January 2018				</time>
			</dd>			
						</dl>
	
	
				
								<div itemprop="articleBody">
		<p>Voilà plusieurs fois que je tombe sur des programmes C cherchant à savoir si un nombre est premier ou pas. La plupart du temps, on peut aller beaucoup plus loin que ce qui est proposé. </p> 
 
<p>Petit tour d'horizon des optimisations à appliquer&nbsp;; pas toujours évidentes, mais qui ont l'avantage d'être bien plus rapides que l'implémentation naïve. </p> 
 
<h2>Définition du cahier des charges</h2> 
<h3>Que doit faire le programme&nbsp;? </h3> 
<p>Dans cet article, j'examinerai différents algorithmes qui auront pour but de trouver tous les nombres premiers inférieurs à une constante, <tt>MAX_NUM</tt> et de les renvoyer à l'intérieur d'un tableau d'entiers. </p> 
 
<p>Les contraintes suivantes devront être respectées&nbsp;: </p> 
 
<ul> 
	<li>Code le plus performant possible. </li> 
	<li>Pas d'algorithmes compliqués&nbsp;: les codes ne dépasseront pas quarante lignes. </li> 
	<li><tt>MAX_NUM</tt> restera inférieur à la taille maximale codable sur une variable de type <tt>unsigned long</tt>. </li> 
	<li>On ne se soucie pas de l'affichage du tableau à la fin</li> 
	<li>Pour rester général, les codes seront en C. </li> 
</ul>
 <p><a href="http://blog.neamar.fr/telechargements/Premiers.zip">Télécharger les codes de tests.</a> </p> 

<h3>Précisons les choses</h3> 
<h4>Nombre premier</h4> 
<p>Avant d'aller plus loin, définissons le terme de nombre premier. Il s'agit d'un nombre qui n'admet aucun autre diviseur que 1&nbsp;et lui-même&nbsp;; par convention on ne considére pas 1&nbsp;comme premier. <br /> 
Par exemple, 8 n'est pas premier car il se décompose en <span class="TexTexte"> 4 &times; 2</span>, tandis que 2, 3, 5, 7&nbsp;le sont. </p> 
 
<h4>Protocole de test</h4> 
<p>Chacun des codes ne sera constitué que d'un seul fichier. <br /> 
Les codes seront testés en C compilé avec <tt>gcc</tt> sans aucune option de compilation. La durée d'exécution sera calculée à l'aide de la fonction UNIX <a href="http://www.bash-linux.com/unix-man-time-francais.html">time</a>. </p> 
 
<p>Ligne de commande de compilation&nbsp;:</p>
<pre>
gcc fichier.c -lm && time ./a.out
</pre>
 
<h4>Détails pratiques</h4> 
<p>Pour les calculs, on règlera <tt>MAX_NUM</tt> à 1&nbsp;000&nbsp;000&nbsp;; cela suffit pour faire travailler le processeur un minimum sans avoir à attendre la fin de la journée (au total, on devra trouver <a href="http://www.wolframalpha.com/input/?i=prime+&lt;1000000">78&nbsp;498&nbsp;nombres premiers</a> dans cet intervalle). <br /> 
Les temps que j'indique proviennent d'un PC de test qui ne fait tourner que l'application. </p> 
 
<h3>Dédicace</h3> 
<p>Je dédicace cet article à un tyran fort pédagogue qui se reconnaîtra sûrement en lisant cet article dont il est l'inspirateur&hellip; hém hém. </p> 
 
<h2>Approches intuitives</h2> 
<h3>Je suis jeune et naïf, je code vite et pas optimisé</h3> 
<p>Première approche&nbsp;: on veut récupérer tous les nombres premiers inférieurs à <tt>MAX_NUM</tt>, je vais donc faire une boucle sur ces nombres. Pour chacun des nombres, j'appellerais une fonction qui me renverra true si le nombre est premier, false sinon. <br /> 
Cette fonction testera tous les nombres <span class="TexTexte">i</span> inférieurs à son paramètre <span class="TexTexte">p</span> et regardera si <span class="TexTexte">i</span> divise <span class="TexTexte">p</span>&nbsp;; si c'est le cas on renvoie directement true&nbsp;; sinon on sort de la boucle et on renvoie false. </p> 
 
<p>Implémentation&nbsp;: code n<sup>o</sup>1</p> 
<pre xml:lang="c">
#include &lt;stdio.h&gt;

#define MAX_NUM 1000000

/**
* Cette fonction prend en paramètre un nombre et essaie de calculer
* s'il est premier ou non.
* @param p Le nombre dont on veut tester la primalité
* @return 0 si p n'est pas premier, 1 sinon.
*/
int premier(unsigned long p)
{
	unsigned long i;
	//Pour chacun des nombres inférieurs à p
	for(i=2;&lt;p;i++)
	{
		//i est-il un diviseur de p ?
		//NOTE : % dénote l'opération modulo,
		//qui renvoie le reste de la division euclidienne de p par i.
		//Exemple : 5 % 2 = 1 (car 5 = 2*2 + 1)
		if(p % i == 0)
			return 0;
	}

	//Aucun des nombres ne le divise, p est premier
	return 1;
}
int main()
{
	unsigned long Premiers[MAX_NUM];
	unsigned long premiers_trouves = 0;
	unsigned long nombre;

	//On commence la boucle à deux car 1 n'est pas premier.
	for(nombre=2; nombre&lt;MAX_NUM;nombre++)
	{
		if(premier(nombre) == 1)
		{
			//Le nombre i est premier, l'ajouter.
			Premiers[premiers_trouves++] = nombre;
		}
	}
	printf("Total : %lu\n",premiers_trouves);
	return 0;
}

</pre>
<p>Effectivement, ça marche. Mais c'est long, très long&hellip; </p> 
 
<p>Temps du code&nbsp;: 8m54,778s</p> 
 
<h3>Je suis jeune et un peu moins naïf, j'ai déjà fait des maths</h3> 
<p>L'idée&nbsp;: s'arrêter à la racine carrée pendant les tests. </p> 
 
<p>Le code précédent effectue un nombre incroyable de tests inutiles. <br /> 
Pour comprendre pourquoi, il va falloir faire un minimum de maths&hellip; <br /> 
Admettons que notre nombre x s'écrive comme le produit de y et de z (<span class="TexTexte">x = y &times; z</span>). Que peut-on dire de <span class="TexTexte">y</span> et de <span class="TexTexte">z</span> par rapport à <span class="TexTexte">x</span>&nbsp;? L'un des deux est forcément inférieur ou égal à la racine carrée de <span class="TexTexte">x</span>. Il suffit donc de modifier notre fonction <tt>premier</tt> pour arrêter la boucle for à la racine carrée&nbsp;: après, on a forcément déjà testé. Comme on travaille avec des entiers et que la racine est rarement entière, on rajoute 1&nbsp;pour être sûr de ne pas avoir un arrondi malheureux. <br /> 
Accessoirement, j'ai aussi modifié la condition&nbsp;: spécifier <tt>== 1</tt> est inutile (mais cela ne change normalement rien, le compilateur faisant efficacement son boulot). </p> 
 
<p>Implémentation&nbsp;: code n<sup>o</sup>2</p> 
<pre xml:lang="c">
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#define MAX_NUM 1000000

int premier(unsigned long p)
{
	unsigned long i;
	//Pour chacun des nombres inférieurs à racine(p)
	unsigned long sqrt_p = sqrt(p) + 1;
	for(i=2;i&lt;sqrt_p;i++)
	{
		if(p % i == 0)
			return 0;
	}

	//Aucun des nombres ne le divise, p est premier
	return 1;
}
int main()
{
	unsigned long Premiers[MAX_NUM];
	unsigned long premiers_trouves = 0;
	unsigned long nombre;
	
	for(nombre=2; nombre&lt;MAX_NUM;nombre++)
	{
		if(premier(nombre))
		{
			Premiers[premiers_trouves++] = nombre;
		}
	}
	printf("Total : %lu\n",premiers_trouves);
	return 0;
}

</pre>

<p>Mieux, beaucoup mieux. Cette fois, il ne faut qu'un peu plus d'une seconde pour faire les mêmes calculs&nbsp;; c'est une énorme amélioration&nbsp;! Mais c'est loin d'être fini. </p> 
 
<p>Temps du code&nbsp;: 0m1,013&nbsp;s</p> 
 
<h3>Je suis jeune et encore moins naïf, j'ai déjà fait des maths et de l'algorithmie</h3> 
<p>L'idée&nbsp;: les nombres pairs ne sont jamais premiers. </p> 
 
<p>Avez-vous remarqué que l'on continue de faire des calculs inutiles&nbsp;? Si si, regardez&nbsp;: on teste pour savoir si les nombres 4, 6, 8, <em>etc. </em> sont premiers. Mais c'est stupide&nbsp;! Le seul nombre pair premier, c'est deux&nbsp;; calculer les autres est un gâchis de précieux temps. <br /> 
De même à l'intérieur de la fonction <tt>premier</tt>&nbsp;: pourquoi vérifier si le nombre est divisible par 4&nbsp;alors qu'il n'est pas divisible par deux&nbsp;? Autant sauter le problème&nbsp;! On va donc modifier l'itérateur de la boucle en remplaçant le <tt>i++</tt> par <tt>i+=2</tt>. Et plutôt que de commencer à 2, on va directement à 3&nbsp;: on examinera donc 3, 5, 7&hellip; <br /> 
Cette nouvelle approche fait cependant disparaître le 2&nbsp;de la liste des nombres&nbsp;; il va donc falloir l'ajouter manuellement au tout début. </p> 
 
<p>Implémentation&nbsp;: code n<sup>o</sup>3</p> 
<pre xml:lang="c">
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#define MAX_NUM 1000000

int premier(unsigned long p)
{
	unsigned long i;
	//Pour chacun des nombres impairs inférieurs à racine(p)
	unsigned long sqrt_p = sqrt(p) + 1;
	for(i=3;i&lt;sqrt_p;i += 2)
	{
	  if(p % i == 0)
		  return 0;
	}

	return 1;
}
int main()
{
	unsigned long Premiers[MAX_NUM/2];
	unsigned long premiers_trouves = 0;
	unsigned long nombre;
	
	//Placer le 2 dans la liste car la boucle le saute directement.
	Premiers[premiers_trouves++]=2;
	
	//On commence la boucle à trois et on va de nombre impair en nombre impair
	for(nombre=3; nombre&lt;MAX_NUM;nombre+=2)
	{
		if(premier(nombre))
		{
			Premiers[premiers_trouves++] = nombre;
		}
	}
	printf("Total : %lu\n",premiers_trouves);
	return 0;
}

</pre>

<p>Notez aussi que la taille du tableau contenant les nombres premiers a été réduite par deux elle-aussi. En théorie on aurait pu faire une meilleure approximation (en prenant une borne supérieure de x/ln(x) par exemple), en pratique on se contentera de cela, n'allons pas tout compliquer. <br /> 
De façon très logique, on trouve un temps divisé par deux&hellip; qui en est surpris, considérant les changements de ce nouveau code&nbsp;? </p> 
 
<p>Temps du code&nbsp;: 0m0,504&nbsp;s</p> 
 
<h3>Je suis jeune, pas trop naïf et j'ai de la suite dans les idées</h3> 
<p>La dernière fois, nous avons modifié notre code pour sauter automatiquement les multiples de deux. Mais pourquoi s'arrêter en si bon chemin&nbsp;? Sautons aussi les multiples de 3&nbsp;! <br /> 
Comme je suppose que la formule ne vous vient pas intuitivement, examinons la séquence formées des nombres qui ne sont multiples ni de deux ni de trois&nbsp;: 5, 7, 11, 13, 17, 19, 23, 25&hellip; <br /> 
Attention&nbsp;! Notez bien qu'il ne s'agit pas de nombres premiers (regardez 25&nbsp;par exemple)&nbsp;; mais de nombres qui ne sont pas divisibles par deux ou trois. <br /> 
Vous voyez une relation&nbsp;? Non&nbsp;? Mais si, regardez la différence entre deux nombres consécutifs&nbsp;! Une fois deux, une fois quatre, une fois deux, et ainsi de suite. Notre <tt>i+=2</tt> se transforme donc en <tt>i+=pas</tt>. Mais comment faire alterner ce pas&nbsp;? Avec un test <tt>if</tt>&nbsp;? On pourrait, mais on va faire beaucoup plus rapide &ndash; ce qui reste le but principal. <br /> 
Je vous laisse chercher un peu la formule, c'est toujours la même quand on veut faire alterner un nombre entre deux valeurs&nbsp;: (somme des choix) &ndash; valeur actuelle. Ainsi, on initalisera au début notre pas à 2<sup><a class="footnote" id="Note-1" href="#Ref-1" title="En fait, on l'initalise à 4&nbsp;pour qu'il soit à deux au moment où on veut l'utiliser. ">1</a></sup>, puis on lui appliquera la formule <span class="TexTexte">(4+2) - pas</span> pour obtenir le nouveau pas, et ainsi de suite. Essayez, ça marche&nbsp;! <br /> 
Comme la dernière fois, cette stratégie nous fait gagner du temps&hellip; mais nous empêche de mémoriser 2&nbsp;et 3, qu'il faut donc ajouter manuellement dans le tableau. </p> 
 
<p>Implémentation&nbsp;: code n<sup>o</sup>4</p> 
<pre xml:lang="c">
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#define MAX_NUM 1000000

int premier(unsigned long p)
{
	unsigned long i;
	//Pour chacun des nombres impairs inférieurs à racine(p)
	unsigned long sqrt_p = sqrt(p) + 1;
	int pas = 4;
	for(i=5;i&lt;sqrt_p;i += pas)
	{
		if(p % i == 0)
			return 0;

		//Mettre à jour le pas
		pas = 6 - pas;
	}
	return 1;
}

int main()
{
	unsigned long Premiers[MAX_NUM/2];
	unsigned long premiers_trouves = 0;
	unsigned long nombre;
	
	//Placer les 2 et 3 dans la liste car la boucle les saute directement.
	Premiers[premiers_trouves++]=2;
	Premiers[premiers_trouves++]=3;
	
	//On commence la boucle à sept et on va de nombre impair en nombre impair
	unsigned int pas = 4;
	for(nombre=5; nombre&lt;MAX_NUM; nombre+=pas)
	{	
		if(premier(nombre))
		{
			Premiers[premiers_trouves++] = nombre;
		}
		
		//Mettre à jour le pas
		pas = 6 - pas;
	}
	printf("Total : %lu\n",premiers_trouves);
	return 0;
}

</pre>

<p>Vous devriez vous dire qu'on peut continuer ainsi longtemps, en enlevant les diviseurs. Après 2&nbsp;et 3, on vire le 5, puis le 7&hellip; sauf que le calcul du pas augmente alors en complexité, et on y perd tout avantage. En fait, l'approche naïve est maintenant bien optimisée&nbsp;: on peut difficilement faire mieux<sup><a class="footnote" id="Note-2" href="#Ref-2" title="À moins de jouer avec les options du compilateur, mais on se l'est interdit dans le cahier des charges&nbsp;! À titre d'exemple, avec l'option -O3, on gagne une cinquantaine de millisecondes. ">2</a></sup>.</p> 
 
<p>Temps du code&nbsp;: 0m0,361&nbsp;s</p> 
 
<h2>Passons aux choses sérieuses</h2> 
<p>La première approche est maintenant rapide, on ne l'améliorera pas significativement. Pour progresser encore, il faut revoir notre stratégie et se poser la question&nbsp;: «&nbsp;qu'est-ce qui fait ramer&nbsp;?&nbsp;». <br /> 
Dans un projet normal, la réponse est rarement aisée à trouver. Ici, le peu de lignes de codes nous aide&nbsp;: on va analyser les opérations potentiellement longues. </p> 
 
 
<ul > 
<li>Le calcul de la racine carrée&nbsp;: ce n'est pas un calcul primordial (il n'est pas dans la boucle principale), mais on pourrait l'optimiser &ndash; par exemple en calculant le développement limité de la fonction racine autour du point considéré, ou <a href="http://www.wolframalpha.com/input/?i=taylor+expansion+sqrt(x)+at+x=500000">plus simplement autour du centre</a> (500&nbsp;000) et en corrigeant l'erreur pour les points lointains. Mais nous ne sommes pas ici pour faire des maths&nbsp;! Conclusion&nbsp;: on n'y touche pas.</li> 
<li>L'appel de fonction&nbsp;: c'est sûrement l'un des problèmes principaux&nbsp;: chaque appel de fonction oblige le processeur à empiler et dépiler des valeurs inutilement. Le surcoût est ici difficilement tolérable, car tout le reste du code est constitué d'instructions simples (alors que dans la normale, il est courant d'avoir des instructions dont la durée est significativement plus grande qu'un appel de fonction).</li> 
<li>Les tests en folie&nbsp;: finalement, la seule chose qui reste en dehors des boucles for, c'est ces tests <tt>if</tt>. Hé bien, nous allons justement les condenser pour en extraire la substantifique moelle plus rapidement&hellip; 
</li> 
</ul> 
 
<h3>Retour à la base avec la nouvelle approche</h3> 
<p>Pour ne pas aller trop vite, je vais reprendre le tout premier code en lui appliquant la nouvelle architecture. Il sera donc plus lent que le code n<sup>o</sup>4, mais plus rapide que le test n<sup>o</sup>1 avec lequel il doit être comparé. </p> 
 
<p>Implémentation&nbsp;: code n<sup>o</sup>2-1</p> 
<pre xml:lang="c">
#include &lt;stdio.h&gt;

#define MAX_NUM 1000000

int main()
{
	unsigned long Premiers[MAX_NUM/2];
	unsigned long premiers_trouves = 0;
	unsigned long nombre;
	unsigned long i;
	
	for(nombre=2; nombre&lt;MAX_NUM; nombre++)
	{	
		//Test de primalité direct :
		for(i=2; nombre % i;i++);
		//----Notez l'absence de corps :
		//tout s'effectue dans les conditions du for.
		
		if(i == nombre)
		{
			Premiers[premiers_trouves++]=i;
		}
	}
	printf("Total : %lu\n",premiers_trouves);
	return 0;
}

</pre>

<p>Que dire&nbsp;? D'abord, le code est beaucoup plus concis que son équivalent «&nbsp;naïf&nbsp;»&nbsp;: le nombre d'instructions est beaucoup plus limité, et la «&nbsp;zone critique&nbsp;» (la boucle for imbriquée) n'est pas encombrée de tests&nbsp;: en fait, la boucle for n'a même pas de corps (il y a un point virgule à la fin, pas un bloc entouré par des accolades comme on en a l'habitude). <br /> 
Note&nbsp;: à chaque passage dans la boucle for, le processeur teste la condition de sortie et sort de la boucle si elle vaut 0. On profite de ce comportement pour ne même pas effectuer la comparaison implicite <tt>i % nombre&nbsp;! = 0</tt>. <br /> 
Une petite précision s'impose pour expliquer l'absence de condition de sortie <tt>i &lt; nombre</tt>&nbsp;: c'est le modulo qui joue le même rôle (puisque <span class="TexTexte">Nombre mod Nombre = 0</span>), et ce en plus de tester la divisibilité. En sortie de boucle, il nous reste donc à déterminer à qui est dû la fin de la boucle&nbsp;: la présence d'un diviseur, ou son absence (c'est le test <tt>if</tt>). </p> 
 
<p>Temps du code&nbsp;: 8m6,025s. Ça n'en a pas l'air, mais c'est une amélioration de presque 10%&nbsp;! </p> 
 
<h3>Toujours plus loin&nbsp;! </h3> 
<p>L'idée&nbsp;: replacer toutes les améliorations précédentes dans la nouvelle approche. <br /> 
Maintenant que le concept de base est maîtrisé (se servir des conditions des boucles for), on peut ré-implémenter nos idées précédentes&nbsp;: s'arrêter à la racine carrée, sauter les multiples de deux et de trois&hellip; <br /> 
Mais pas question de rajouter trop de code&nbsp;! On peut faire ça rapidement&nbsp;: </p> 
 
<p>Implémentation&nbsp;: code n<sup>o</sup>2-2</p> 
<pre xml:lang="c">
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#define MAX_NUM 1000000

int main()
{
	unsigned long Premiers[MAX_NUM/2];
	unsigned long premiers_trouves = 0;
	unsigned long nombre;
	unsigned long i;
	
	Premiers[premiers_trouves++]=2;
	Premiers[premiers_trouves++]=3;
	
	int pasNombre = 4;
	
	for(nombre=5; nombre&lt;MAX_NUM; nombre+=(pasNombre=6-pasNombre))
	{
		int pasI = 4;
		unsigned long sqrt_nombre=sqrt(nombre) + 1;
		//Test de primalité direct :
		for(i=5; (i&lt;sqrt_nombre) && (nombre % i);i+=(pasI = 6 - pasI));

		
		if(i >= sqrt_nombre)
		{
			Premiers[premiers_trouves++]=nombre;
		}
	}

	printf("Total : %lu\n",premiers_trouves);
	return 0;
}

</pre>

<p>Notez la concision du code, au détriment de la lisibilité&hellip; en particulier, la deuxième boucle devient peu digeste. </p> 
 
<p>Temps du code&nbsp;: 0m0,348s. C'est quelques millisecondes de plus par rapport à notre précédent record&nbsp;! </p> 
 
<h3>Tant et plus&nbsp;? </h3> 
<p>Vous pensez qu'on ne fera pas mieux&nbsp;? Détrompez-vous&nbsp;! <br /> 
Comme je le disais plus haut, la stratégie «&nbsp;enlever les nombres premiers déjà trouvés dans le pas&nbsp;» est payante mais complexe&nbsp;: la formule de base (+2) s'est transformée en (+2, +4), et devient de pire en pire. Plutôt que de continuer ainsi, on va plutôt profiter de notre liste de nombres premiers en partant du principe que si aucun nombre premier ne divise x, alors x est premier. Pas besoin de tester les autres nombres, qui sont tous des multiples de nombre premiers (par définition même des nombres premiers). <br /> 
Encore une fois, il suffit de tester les nombres premiers inférieurs à <span class="TexTexte">x<sup>1/2</sup></span>. </p> 
 
<p>Implémentation&nbsp;: code n<sup>o</sup>2-3</p> 
<pre xml:lang="c">
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#define MAX_NUM 1000000

int main()
{
	unsigned long Premiers[MAX_NUM/2];
	unsigned long premiers_trouves = 0;
	unsigned long nombre;
	unsigned long i;
	
	Premiers[premiers_trouves++]=2;
	Premiers[premiers_trouves++]=3;
	
	int pasNombre = 4;
	
	for(nombre=5; nombre&lt;MAX_NUM; nombre+=(pasNombre=6-pasNombre))
	{
		unsigned long pointeurCourant=0;
		unsigned long sqrt_nombre=sqrt(nombre) + 1;

		for(i=Premiers[pointeurCourant]; (i&lt;sqrt_nombre) && (nombre % i);i=Premiers[pointeurCourant++]);

		if(i &gt;= sqrt_nombre)
		{
			Premiers[premiers_trouves++]=nombre;
		}
	}

	printf("Total : %lu\n",premiers_trouves);
	return 0;
}

</pre>

<p>Temps du code&nbsp;: 0m0,211s. </p> 
 
<h3>Et pour finir en beauté&hellip; </h3> 
<p>Pour finir en beauté, on va encore pousser l'approche précédente. <br /> 
En fait, on va devoir modifier des grosses sections pour faire fonctionner le code, mais l'idée reste une simple amélioration du concept précédent. </p> 
 
<p>Soyons simple pour l'instant et dé-considérons la suppression des multiples de 2&nbsp;et de 3&nbsp;; on revient sur une boucle for «&nbsp;standard&nbsp;». <br /> 
À chaque fois qu'on rencontre un nombre premier, on va stocker dans un tableau son prochain multiple. Ainsi, si on voit deux, on stockera dans un tableau 4. Si on voit trois, on mettra 6. <br /> 
Pour tester si un nombre donné est premier, on ne va pas faire des tests de divisibilité, juste vérifier qu'il n'est pas dans la liste des multiples. <br /> 
Si le nombre qu'on teste est supérieur au multiple actuellement considéré (par exemple, on teste 5&nbsp;contre le multiple de 2 qu'est 4), on ajoute au multiple la valeur du nombre premier associé (4 se transforme alors en 6&nbsp;et redevient utile. Le 4 disparaît mais on n'en a plus besoin)&nbsp;: ainsi, la table des multiples se remplit au fur et à mesure des nombres qui ne sont pas premiers&nbsp;; tous les autres sont ajoutés dans les deux listes (listes de nombres premiers et liste des multiples). </p> 
 
<p>Vous avez le principe&nbsp;? Complexifions&nbsp;: on reprend notre pas qui évite directement les multiples de 2&nbsp;et 3. En conséquence, on ne trouvera jamais 2  &times; NombrePremier qui est de façon évidente un multiple de 2. De même, 3  &times; NombrePremier sera sauté (multiple de 3). 5  &times; NombrePremier sera trouvé quand on le comparera au multiple de 5&nbsp;actuellement en mémoire, 7 &times; NombrePremier aussi&hellip; finalement, le prochain multiple qu'on peut rencontrer pour un nombre n est <span class="TexTexte">n<sup>2</sup></span> (testez pour n=5&nbsp;: 10&nbsp;est éliminé par le pas, 15 aussi, 20&nbsp;de même, seul 25 arrive). À la découverte d'un nombre premier, on ajoute donc dans la table des multiples ledit nombre premier au carré. Et à chaque fois qu'on passe au dessus (25&nbsp;est éliminé par comparaison à la table des multiples, valeur suivante&nbsp;: 29. 29&gt;25), on met à jour le multiple. Dans la version simple, on ajoutait simplement la valeur de base (5), mais ici c'est inutile (le multiple est impair [les multiples de deux ne sont pas considérés] et la valeur ajoutée est impaire&nbsp;: on obtiendrait un multiple pair, ce qui ne sert à rien)&nbsp;: on ajoutera donc au multiple deux fois la valeur de base (<span class="TexTexte">25 + 2 &times; 5 = 35</span>). </p> 
 
<p>Toujours pas convaincu par cette «&nbsp;simplification&nbsp;» des multiples&nbsp;? Prenons 7&nbsp;: 14&nbsp;est multiple de 2&nbsp;et n'est pas considéré, 21&nbsp;multiple de 3, 28&nbsp;de deux, 35 n'est multiple ni de deux ni de trois, mais est dans la table des multiples [valeur associée à 5&nbsp;une fois passé le cap des 25], la prochaine valeur intéressante à considérer est donc bien <span class="TexTexte"> 7<sup>2</sup>=49</span>). </p> 
 
<p>Allez, c'est pas facile, je vais donner un exemple concret. Pour initaliser, on place dans la liste des nombres premiers 5&nbsp;et son premier multiple à considérer&nbsp;: 25<sup><a class="footnote" id="Note-3" href="#Ref-3" title="Notez que dans cette approche, 2&nbsp;et 3 vont nous gêner si on les met directement dans la liste. On les ajoutera à la fin. ">3</a></sup>.<br /> 
On lance ensuite la boucle for (qui commence à 7, 5 étant manuellement ajouté). </p> 
 
 
<table> 
	<thead> 
		<tr> 
			<th>nombre</th> 
			<th>Premiers</th> 
			<th>Multiples</th> 
			<th>Commentaire</th> 
		</tr> 
	</thead> 
	<tfoot> 
		<tr> 
			<th>nombre</th> 
			<th>Premiers</th> 
			<th>Multiples</th> 
			<th>Commentaire</th> 
		</tr> 
	</tfoot> 
	<tbody> 
		<tr> 
			<td>7</td> 
			<td>{5}</td> 
			<td>{25}</td> 
			<td>7 est-il dans la liste des multiples (qui ne contient pour l'instant que 25)&nbsp;? Non. Le nombre premier associé à 25 (5) est-il supérieur à la racine carrée de 7&nbsp;? Oui&nbsp;; on sort donc et on ajoute 7&nbsp;et 49&nbsp;dans les listes.</td> 
		</tr> 
		<tr> 
			<td>11</td> 
			<td>{5,7}</td> 
			<td>{25,49}</td> 
			<td>Pareil que pour 7&nbsp;: 11 n'est pas dans la liste des multiples, on l'ajoute.</td> 
		</tr> 
		<tr> 
			<td>13</td> 
			<td>{5,7, 11}</td> 
			<td>{25,49,121}</td> 
			<td></td> 
		</tr> 
		<tr> 
			<td>17</td> 
			<td>{5,7, 11,13}</td> 
			<td>{25,49,121,169}</td> 
			<td>On continue&nbsp;: pour l'instant tout le monde est premier.</td> 
		</tr> 
		<tr> 
			<td>19</td> 
			<td>{5,7, 11,13,17}</td> 
			<td>{25,49,121,169,&hellip;}</td> 
			<td>J'arrête de noter la table des multiples, vous avez compris le principe.</td> 
		</tr> 
		<tr> 
			<td>23</td> 
			<td>{5,7, 11,13,17,19}</td> 
			<td>{25,49,121,169,&hellip;}</td> 
			<td></td> 
		</tr> 
		<tr> 
			<td>25</td> 
			<td>{5,7, 11,13,17,19,&hellip;}</td> 
			<td>{25,49,121,169,&hellip;}</td> 
			<td>Ah&nbsp;! Cette fois, on trouve bien 25&nbsp;dans la liste des multiples. On peut donc affirmer qu'il n'est pas premier&nbsp;!</td> 
		</tr> 
		<tr> 
			<td>29</td> 
			<td>{5,7, 11,13,17,19,&hellip;}</td> 
			<td>{<strong>3</strong>5,49,121,169,&hellip;}</td> 
			<td>29&gt;25&nbsp;: on met donc à jour la table des multiples. Quant à 29, il n'est pas dans nos multiples, il est donc premier.</td> 
		</tr> 
		<tr> 
			<td>31</td> 
			<td>{5,7, 11,13,17,19,&hellip;}</td> 
			<td>{35,49,121,169,&hellip;}</td> 
			<td></td> 
		</tr> 
		<tr> 
			<td>35</td> 
			<td>{5,7, 11,13,17,19,&hellip;}</td> 
			<td>{35,49,121,169,&hellip;}</td> 
			<td>Dans la table des multiples, donc non premier.</td> 
		</tr> 
		<tr> 
			<td>37</td> 
			<td>{5,7, 11,13,17,19,&hellip;}</td> 
			<td>{<strong>4</strong>5,49,121,169,&hellip;}</td> 
			<td>On met à jour le prochain multiple, et on continue.</td> 
		</tr> 
	</tbody> 
</table> 
 
<p>Implémentation&nbsp;: code n<sup>o</sup>2-4</p> 
<pre xml:lang="c">
#include &lt;stdio.h&gt;

#define MAX_NUM 1000000

int main()
{
	unsigned long Premiers[MAX_NUM/2];
	unsigned long Multiples[MAX_NUM/2];
	unsigned long premiers_trouves = 0;
	unsigned long nombre;
	unsigned long i;
	
	Multiples[premiers_trouves]=5*5;
	Premiers[premiers_trouves++]=5;
	
	
	int pasNombre = 2;
	
	for(nombre=7; nombre&lt;MAX_NUM; nombre+=(pasNombre=6-pasNombre))
	{
		unsigned long pointeurCourant=0;
		//Test de primalité direct :
		for(i=Premiers[pointeurCourant]; (nombre!=Multiples[pointeurCourant]) && i*i &lt; nombre;i=Premiers[++pointeurCourant])
		{
			if(nombre>Multiples[pointeurCourant])
				Multiples[pointeurCourant] +=2*i;

		}

		
		if(nombre!=Multiples[pointeurCourant])
		{
			Multiples[premiers_trouves] = nombre * nombre;
			Premiers[premiers_trouves++] = nombre;
		}
	}

	Premiers[premiers_trouves++]=2;
	Premiers[premiers_trouves++]=3;
	
	printf("Total : %lu\n",premiers_trouves);
	return 0;
}

</pre>

<p>Temps du code&nbsp;: 0m0,120s. </p> 

<h2>En conclusion</h2> 
<p>Cet article vous aura, je l'espère interessé. Il montre l'importance du choix de l'algorithme, mais aussi la nécessité de comprendre les mécanismes internes du langage (je pense par exemple aux appels de fonction, ou aux possibilités offertes par les boucles for). Soyons franc cependant&nbsp;: améliorer de 445&nbsp;000&nbsp;% son code n'est pas un événement courant. Mais l'important est de comprendre le principe&hellip;<br />
Pour ceux qui souhaiteraient aller plus loin sachez que l'on utilise aussi des tests dits probabilistes qui sont éminemment plus rapides. Je n'en traite pas ici, et par méconnaissance du sujet, et pour ne pas embrouiller le lecteur en apportant des idées autrement plus complexes que les algorithmes "de base" que je présente ici.<br />
Je redirigerai donc le lecteur curieux vers les tests de primalité de <a href="http://fr.wikipedia.org/wiki/Test_de_primalit%C3%A9_de_Solovay-Strassen">Solovay-Strassen</a> et de <a href="http://fr.wikipedia.org/wiki/Test_de_primalit%C3%A9_de_Miller-Rabin">Miller-Rabin</a>.</p> 
 
<p><a href="http://blog.neamar.fr/telechargements/Premiers.zip">Télécharger les codes de tests.</a> </p> 

<table style="margin:auto">
	<caption>Tableau comparatif (les algo comparables sont sur la même ligne)</caption>
	<thead>
		<tr>
			<th colspan="2">Première approche</th>
			<th colspan="2">Deuxième approche</th>
		</tr>
		<tr>
			<th>Algo</th>
			<th>Temps</th>
			<th>Algo</th>
			<th>Temps</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>1</td>
			<td>8m54.778s</td>
			<td>1</td>
			<td>8m6.025s</td>
		</tr>
		<tr>
			<td>2</td>
			<td>0m1.013s</td>
			<td colspan="2" rowspan="2">
		</tr>
		<tr>
			<td>3</td>
			<td>0m0.504s</td>
		</tr>
		<tr>
			<td>4</td>
			<td>0m0.361s</td>
			<td>2</td>
			<td>0m0.348s</td>
		</tr>
		<tr>
			<td colspan="2" rowspan="2">
			<td>3</td>
			<td>0m0.211s</td>
		</tr>
		<tr>
			<td>4</td>
			<td>0m0.120s</td>
		</tr>
	</tbody>
</table>

<hr class="footnote court" /> 
<ol style="list-style-type:none;">
	<li><a class="footnote" id="Ref-1" href="#Note-1"><sup>1</sup> <small>&uarr;</small></a> En fait, on l'initalise à 4&nbsp;pour qu'il soit à deux au moment où on veut l'utiliser. </li> 
	<li><a class="footnote" id="Ref-2" href="#Note-2"><sup>2</sup> <small>&uarr;</small></a> À moins de jouer avec les options du compilateur, mais on se l'est interdit dans le cahier des charges&nbsp;! À titre d'exemple, avec l'option <tt>-O3</tt>, on gagne une cinquantaine de millisecondes. </li> 
	<li><a class="footnote" id="Ref-3" href="#Note-3"><sup>3</sup> <small>&uarr;</small></a> Notez que dans cette approche, 2&nbsp;et 3 vont nous gêner si on les met directement dans la liste. On les ajoutera à la fin. </li> 
</ol>	</div>

	
							</div>

					
<ul itemscope itemtype="https://schema.org/BreadcrumbList" class="breadcrumb">
			<li>
			You are here: &#160;
		</li>
	
				<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem" class="active">
				<span itemprop="name">
					Home				</span>
				<meta itemprop="position" content="1">
			</li>
		</ul>

					<!-- End Content -->
				</main>
									<div id="aside" class="span3">
						<!-- Begin Right Sidebar -->
						<div class="well _menu"><h3 class="page-header">Main Menu</h3><ul class="nav menu">
<li class="item-104 default current active"><a href="/" >Blog de Neamar</a></li><li class="item-103"><a href="/autres-articles" >Articles du blog</a></li><li class="item-105"><a href="/les-liens-du-jeudi" >Les liens du jeudi</a></li></ul>
</div>
						<!-- End Right Sidebar -->
					</div>
							</div>
		</div>
	</div>
	<!-- Footer -->
	<footer class="footer" role="contentinfo">
		<div class="container">
			<hr />
			
			<p class="pull-right">
				<a href="#" id="back-top">
					Back to Top				</a>
			</p>
			<p>
				&copy; 2024 Blog de Neamar			</p>
		</div>
	</footer>
	
</body>
</html>
