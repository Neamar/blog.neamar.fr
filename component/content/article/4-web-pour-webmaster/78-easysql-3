<!DOCTYPE html>
<html lang="en-gb" dir="ltr">
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta charset="utf-8" />
	<base href="https://blog.neamar.fr" />
	<meta name="keywords" content="EasySQL, SQL, PHP, admin" />
	<meta name="author" content="Neamar" />
	<meta name="description" content="Distributeur de liens !" />
	<meta name="generator" content="Joomla! - Open Source Content Management" />
	<title>Blog de Neamar</title>
	<link href="https://blog.neamar.fr/component/content/article/4-web-pour-webmaster/78-easysql-3" rel="canonical" />
	<link href="/templates/protostar/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
	<link href="/templates/protostar/css/template.css" rel="stylesheet" />
	<link href="//fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" />
	<style>

	h1, h2, h3, h4, h5, h6, .site-title {
		font-family: 'Open Sans', sans-serif;
	}
	body.site {
		border-top: 3px solid #0088cc;
		background-color: #f4f6f7;
	}
	a {
		color: #0088cc;
	}
	.nav-list > .active > a,
	.nav-list > .active > a:hover,
	.dropdown-menu li > a:hover,
	.dropdown-menu .active > a,
	.dropdown-menu .active > a:hover,
	.nav-pills > .active > a,
	.nav-pills > .active > a:hover,
	.btn-primary {
		background: #0088cc;
	}
	</style>
	<script src="/media/jui/js/jquery.min.js"></script>
	<script src="/media/jui/js/jquery-noconflict.js"></script>
	<script src="/media/jui/js/jquery-migrate.min.js"></script>
	<script src="/media/system/js/caption.js"></script>
	<script src="/media/jui/js/bootstrap.min.js"></script>
	<script src="/templates/protostar/js/template.js"></script>
	<script>
jQuery(window).on('load',  function() {
				new JCaption('img.caption');
			});
jQuery(function($){ $(".hasTooltip").tooltip({"html": true,"container": "body"}); });
	</script>

	<!--[if lt IE 9]><script src="/media/jui/js/html5.js"></script><![endif]-->
</head>
<body class="site com_content view-article no-layout no-task">
	<!-- Body -->
	<div class="body">
		<div class="container">
			<!-- Header -->
			<header class="header" role="banner">
				<div class="header-inner clearfix">
					<a class="brand pull-left" href="/">
						<span class="site-title" title="Blog de Neamar">Blog de Neamar</span>											</a>
					<div class="header-search pull-right">

					</div>
				</div>
			</header>

			<div class="row-fluid">
								<main id="content" role="main" class="span9">
					<!-- Begin Content -->

					<div id="system-message-container">
	</div>

					<div class="item-page" itemscope itemtype="https://schema.org/Article">
	<meta itemprop="inLanguage" content="en-GB" />


			<div class="page-header">
					<h2 itemprop="headline">
				EasySQL : documentation de la classe			</h2>
									</div>

<div class="icons">

					<div class="btn-group pull-right">
				<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span><span class="caret"></span> </a>
								<ul class="dropdown-menu">
																<li class="email-icon"> <a href="/component/mailto/?tmpl=component&amp;template=protostar&amp;link=0a1b0c90490c168c988e89d7ad8da988b705918f" title="Email this link to a friend" onclick="window.open(this.href,'win2','width=400,height=350,menubar=yes,resizable=yes'); return false;" rel="nofollow"><span class="icon-envelope"></span>Email</a> </li>
														</ul>
			</div>

	</div>

				<dl class="article-info muted">


			<dt class="article-info-term">
									Details							</dt>

							<dd class="createdby" itemprop="author" itemscope itemtype="https://schema.org/Person">
					Written by <span itemprop="name">Neamar</span>	</dd>


										<dd class="category-name">
													Category: <span itemprop="genre">Articles du blog</span>							</dd>

												<dd class="create">
					<span class="icon-calendar"></span>
					<time datetime="2010-02-07T13:18:25+00:00" itemprop="dateCreated">
						Created: 07 February 2010					</time>
			</dd>
										<dd class="modified">
				<span class="icon-calendar"></span>
				<time datetime="2013-08-06T23:18:27+00:00" itemprop="dateModified">
					Last Updated: 06 August 2013				</time>
			</dd>
						</dl>



								<div itemprop="articleBody">
		<p>Sommaire :</p>
<ul>
	<li><a href="http://blog.neamar.fr/component/content/article/4-web-pour-webmaster/76-easysql-1">Présentation d'<strong>EasySQL</strong></a></li>
	<li><a href="http://blog.neamar.fr/component/content/article/4-web-pour-webmaster/77-easysql-2">Comment utiliser <strong>EasySQL</strong></a></li>
	<li>(en cours de lecture) <a href="http://blog.neamar.fr/component/content/article/4-web-pour-webmaster/78-easysql-3">Documentation d'<strong>EasySQL</strong></a></li>
</ul>

<p>Cet article documente l'utilisation d'EasySQL.
Il est préférable d'avoir lu les deux articles précédents qui présentaient <tt>EasySQL</tt> avec des exemples et des cas concrets.</p>






<p>Table des matières :</p>
<ol><li><a href="#EasySQL">class <big><em>EasySQL</em></big></a></li>
<li><a href="#checkCompatibility">public static function <big><em>checkCompatibility</em></big>($Table,$Verbose=true)</a></li>
<li><a href="#getFormTable">public static function <big><em>getFormTable</em></big>($Action='',$Valeur='')</a></li>
<li><a href="#getAdminInterface">public static function <big><em>getAdminInterface</em></big>($Table,array $Options)</a></li>

<li><a href="#getFormInsert">public static function <big><em>getFormInsert</em></big>($Table,$FormName='',$Action='')</a></li>
<li><a href="#getFormUpdate">public static function <big><em>getFormUpdate</em></big>($Table,$ID,$FormName='',$Action='')</a></li>
<li><a href="#getFormPreUpdate">public static function <big><em>getFormPreUpdate</em></big>($Table,$OrderBy=null)</a></li>
<li><a href="#getFormDelete">public static function <big><em>getFormDelete</em></big>($Table,$FormName='',$Action='')</a></li>
<li><a href="#getFormDeleteAndUpdate">public static function <big><em>getFormDeleteAndUpdate</em></big>($Table,$FormName='',$Action='')</a></li>

<li><a href="#commitInsert">public static function <big><em>commitInsert</em></big>($Table,array &amp;$_POST,$estSecurise=true)</a></li>
<li><a href="#commitUpdate">public static function <big><em>commitUpdate</em></big>($Table,array &amp;$_POST,$estSecurise=true)</a></li>
<li><a href="#commitDelete">public static function <big><em>commitDelete</em></big>($Table,array &amp;$_POST)</a></li>
<li><a href="#getColumns">public static function <big><em>getColumns</em></big>($Table)</a></li>

<li><a href="#getAll">private static function <big><em>getAll</em></big>($Table,$OrderBy=null)</a></li>
<li><a href="#SQL">public static function <big><em>SQL</em></big>($SQL)</a></li>
<li><a href="#Fail">public static function <big><em>Fail</em></big>($Msg)</a></li>
<li><a href="#setMeta">public static function <big><em>setMeta</em></big>($Name,array $Valeur)</a></li>
<li><a href="#getTableAndField">public static function <big><em>getTableAndField</em></big>($String)</a></li>

<li><a href="#EASYSQL_PREFIXE">Constante <big><em>EASYSQL_PREFIXE</em></big></a></li>
<li><a href="#EASYSQL_MAXLENGTH">Constante <big><em>EASYSQL_MAXLENGTH</em></big></a></li>
<li><a href="#EASYSQL_FOREIGN">Constante <big><em>EASYSQL_FOREIGN</em></big></a></li>
<li><a href="#EASYSQL_ID">Constante <big><em>EASYSQL_ID</em></big></a></li>
</ol>

<h2 id="EasySQL">class <big><em>EasySQL</em></big></h2>

<h3>Description</h3>

<p><a href="#EasySQL" title="Voir EasySQL">EasySQL</a><br />
<a href="http://blog.neamar.fr/component/content/article/4-web-pour-webmaster/78-easysql-3">La documentation mise en forme se trouve sur cette page. </a></p>

<h4>PRÉSENTATION</h4>
<p>Cette classe permet l'administration facile des données d'une table MySQL 5,0&nbsp;ou supérieur. <br />
Contrairement à PhpMyAdmin, aucun outil de modification de schéma n'est fourni&nbsp;: EasySQL se focalise uniquement sur le contenu des tables. <br />
Les trois opérations principales de manipulation sont gérées&nbsp;: insertion, mise à jour, suppression. <br />

À côté de cela, une gestion avancée des clés étrangères est proposée pour faciliter au maximum la manipulation&nbsp;; EasySQL est d'ailleurs conçu pour une utilisation avec le moteur relationnel InnoDB. </p>

<h4>SÉCURITÉ</h4>
<p>EasySQL offre un accès complet à toutes les tables portant le préfixe défini dans la constante <a href="#EASYSQL_PREFIXE" title="Voir EASYSQL_PREFIXE">EASYSQL_PREFIXE</a>. <br />
Pour un accès complet à la base de données, utilisez donc la commande <tt>define('EASYSQL_PREFIXE','')</tt></p>

<h4>POUR COMMENCER</h4>
<p>Avant l'utilisation d'une table avec MySQL, il est recommandé d'appeler la fonction <a href="#checkCompatibility" title="Voir checkCompatibility">EasySQL&nbsp;:&nbsp;: checkCompatibility</a>() pour vérifier que son utilisation est possible. </p>

<h3>Exemples d'utilisation</h3>

<pre xml:lang="php">//Cet exemple simule l'administration d'une table d'articles nommée Blog_Articles.
define('EASYSQL_PREFIXE','Blog_');
define('EASYSQL_WORKTABLE','Articles');//Ce define n'est pas obligatoire, il permet juste de ne pas se trimballer une variable $Table dans tout le script
include('chemin/vers/EasySQL.php');
//Tester la compatibilité de la table :
EasySQL::checkCompatibility(EASYSQL_WORKTABLE);
//Afficher l'interface d'adminisatration le plus rapidement possible. Possibilités : insérer une ligne, éditer une ligne (pas de DELETE ici)
echo EasySQL::getAdminInterface(EASYSQL_WORKTABLE,array('INSERT','UPDATE'));</pre>



<h2 id="checkCompatibility">public static function <big><em>checkCompatibility</em></big>($Table,$Verbose=true)</h2>
<h3>Description</h3>

<p>Tester la compatibilité de <strong>$Table</strong> pour son utilisation avec EasySQL. <br />

Les erreurs fatales sont signalées par le préfixe <tt>*FATAL !*</tt>. <br />
Une seule erreur fatale suffit à l'invalidation de la table. <br />
Les autres lignes peuvent être des informations utiles ou des commentaires pour améliorer l'utilisation de la classe. <br />
La fonction liste aussi toutes les clés étrangères détectées, que ce soit via information_schema, la syntaxe de la colonne, ou les méta données spécifiées dans le script par <a href="#setMeta" title="Voir setMeta">EasySQL&nbsp;:&nbsp;: setMeta</a>(). </p>

<h3>Paramètres d'appel</h3>

<ol>
	<li><strong>$Table</strong> : la table à analyser.</li>
	<li><strong>$Verbose</strong> : si le résultat de l'analyse doit être affiché à l'écran (oui par défaut)</li>
</ol>
<h3>Valeur de retour</h3>
<ul>
	<li>le nombre d'erreurs fatales, 0 indiquant la compatibilité (prévue) de la table avec EasySQL.</li>

</ul>


<h2 id="getFormTable">public static function <big><em>getFormTable</em></big>($Action='',$Valeur='')</h2>
<h3>Description</h3>

<p>Afficher dans un combo box la liste des tables modificables par l'utilisateur. <br />
Le contenu est restreint par <a href="#EASYSQL_PREFIXE" title="Voir EASYSQL_PREFIXE">EASYSQL_PREFIXE</a> qui empêche l'utilisateur de modifier n'importe quelle table. </p>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Action</strong> : la page vers laquelle l'utilisateur doit être redirigé une fois le formulaire validé (action du formulaire)</li>
	<li><strong>$Valeur</strong> : la table à sélectionner par défaut. Si rien n'est précisé, la première table dans l'ordre alphabétique est sélectionnée.</li>
</ol>


<h2 id="getAdminInterface">public static function <big><em>getAdminInterface</em></big>($Table,array $Options)</h2>
<h3>Description</h3>

<p>Récupérer d'un seul coup toutes les composantes de l'administration d'une table. <br />
Permet de réaliser très rapidement une interface propre. </p>

<ul>
	<li><span style="color:purple;">NOTE</span>&nbsp;: cette fonction doit être appelée une fois pour afficher les formulaires, et réappellée au chargement de la page pour effectuer les modifications. </li>

	<li><span style="color:purple;">NOTE</span>&nbsp;: cette fonction ne peut être utilisée qu'UNE SEULE FOIS par page, il n'est pas possible d'afficher l'interface d'administration de plusieurs tables en même temps. Pour cela, il faudra passer par la méthode longue en appelant manuellement <a href="#getFormInsert" title="Voir getFormInsert">EasySQL&nbsp;:&nbsp;: getFormInsert</a>(), <a href="#getFormPreUpdate" title="Voir getFormPreUpdate">EasySQL&nbsp;:&nbsp;: getFormPreUpdate</a>(), <a href="#getFormUpdate" title="Voir getFormUpdate">EasySQL&nbsp;:&nbsp;: getFormUpdate</a>() et <a href="#getFormDelete" title="Voir getFormDelete">EasySQL&nbsp;:&nbsp;: getFormDelete</a>(), ainsi que les fonctions commit associées. </li>

</ul>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Table</strong> : le nom de la table pour laquelle on souhaite afficher l'interface d'administration.</li>
	<li><strong>$Options</strong> : les options offertes à l'utilisateur sous forme d'un tableau. Les options valides sont INSERT, UPDATE, DELETE. Les autres valeurs sont ignorées.</li>
</ol>
<h3>Valeur de retour</h3>

<ul>
	<li>Renvoie un message si une action a été effectuée sur la table.</li>

</ul>
<h3>Exemples d'utilisation</h3>

<pre xml:lang="php">echo EasySQL::getAdminInterface('NomTable',array('UPDATE','DELETE'));</pre>



<h2 id="getFormInsert">public static function <big><em>getFormInsert</em></big>($Table,$FormName='',$Action='')</h2>

<h3>Description</h3>

<p>Récupérer un formulaire permettant l'insertion de données dans la table <strong>$Table. </strong><br />
Les champs du formulaire sont calculés automatiquement en fonction du type de la colonne. En cas de clés étrangères, un combobox est affiché avec la liste des valeurs référencables. </p>

<ul>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Les valeurs nulles sont gérables de façon basique. </li>
</ul>

<h3>Paramètres d'appel</h3>

<ol>
	<li><strong>$Table</strong> : la table sur laquelle effectuer l'insertion</li>
	<li><strong>$FormName</strong> : le nom du formulaire, pour pouvoir le distinguer d'autres formulaires. Si différent de '', un input de type hidden est créé avec le nom du formulaire</li>
	<li><strong>$Action</strong> : la page vers laquelle l'utilisateur doit être redirigé une fois le formulaire validé (action du formulaire)</li>
</ol>


<h2 id="getFormUpdate">public static function <big><em>getFormUpdate</em></big>($Table,$ID,$FormName='',$Action='')</h2>
<h3>Description</h3>

<p>Récupérer un formulaire permettant la modification de données dans la table <strong>$Table. </strong><br />
L'enregistrement à modifier est désigné par son identifiant <strong>$ID</strong> (normalement clé primaire, si plusieurs enregistrements, seul le premier est récupéré et traité)<br />

Les champs du formulaire sont calculés automatiquement en fonction du type de la colonne. En cas de clés étrangères, un combobox est affiché avec la liste des valeurs référençables. <br />
Les valeurs nulles sont gérables de façon basique. </p>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Table</strong> : la table sur laquelle effectuer l'insertion</li>
	<li><strong>$ID</strong> : l'identifiant de l'enregistrement à mettre à jour</li>

	<li><strong>$FormName</strong> : le nom du formulaire, pour pouvoir le distinguer d'autres formulaires. Si différent de '', un input de type hidden est créé avec le nom du formulaire.</li>
	<li><strong>$Action</strong> : la page vers laquelle l'utilisateur doit être redirigé une fois le formulaire validé (action du formulaire)</li>
</ol>


<h2 id="getFormPreUpdate">public static function <big><em>getFormPreUpdate</em></big>($Table,$OrderBy=null)</h2>

<h3>Description</h3>

<p>Récupérer un tableau permettant de sélectionner un enregistrement à modifier. Fonction de convénience qui devient inadaptée si la table contient trop de lignes. </p>

<ul>
	<li><span style="color:purple;">NOTE</span>&nbsp;: L'affichage de chaque colonne est tronqué à <a href="#EASYSQL_MAXLENGTH" title="Voir EASYSQL_MAXLENGTH">EASYSQL_MAXLENGTH</a> caractères pour faciliter la lecture. </li>
</ul>

<h3>Paramètres d'appel</h3>

<ol>
	<li><strong>$Table</strong> : la table pour laquelle on doit afficher le tableau de pré-mise à jour</li>
	<li><strong>$OrderBy</strong> : la clé sur laquelle trier, l'ID décroissant par défaut.</li>
</ol>


<h2 id="getFormDelete">public static function <big><em>getFormDelete</em></big>($Table,$FormName='',$Action='')</h2>

<h3>Description</h3>

<p>Récupérer un formulaire permettant la suppression de données dans la table <strong>$Table. </strong><br />
La suppression est immédiate et définitive, à utiliser avec précaution. </p>

<ul>
	<li><span style="color:purple;">NOTE</span>&nbsp;: L'affichage de chaque colonne est tronqué à <a href="#EASYSQL_MAXLENGTH" title="Voir EASYSQL_MAXLENGTH">EASYSQL_MAXLENGTH</a> caractères pour faciliter la lecture. </li>

</ul>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Table</strong> : la table sur laquelle effectuer la suppression</li>
	<li><strong>$FormName</strong> : le nom du formulaire, pour pouvoir le distinguer d'autres formulaires. Si différent de '', un input de type hidden est créé avec le nom du formulaire.</li>
	<li><strong>$Action</strong> : la page vers laquelle l'utilisateur doit être redirigé une fois le formulaire validé (action du formulaire)</li>

</ol>


<h2 id="getFormDeleteAndUpdate">public static function <big><em>getFormDeleteAndUpdate</em></big>($Table,$FormName='',$Action='')</h2>
<h3>Description</h3>

<p>Combine en une seule fonction les possibilités de <a href="#getFormDelete" title="Voir getFormDelete">EasySQL&nbsp;:&nbsp;: getFormDelete</a>() et <a href="#getFormPreUpdate" title="Voir getFormPreUpdate">EasySQL&nbsp;:&nbsp;: getFormPreUpdate</a>()&nbsp;: affiche un seul tableau avec des options pour modifier une ligne ou la supprimer. <br />

La suppression est immédiate et définitive, à utiliser avec précaution. </p>

<ul>
	<li><span style="color:purple;">NOTE</span>&nbsp;: L'affichage de chaque colonne est tronqué à <a href="#EASYSQL_MAXLENGTH" title="Voir EASYSQL_MAXLENGTH">EASYSQL_MAXLENGTH</a> caractères pour faciliter la lecture. </li>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Les valeurs sont triées par numéro d'ID décroissant. </li>
</ul>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Table</strong> : la table sur laquelle effectuer la mise à jour / suppression</li>
	<li><strong>$FormName</strong> : le nom du formulaire, pour pouvoir le distinguer d'autres formulaires. Si différent de '', un input de type hidden est créé avec le nom du formulaire.</li>
	<li><strong>$Action</strong> : la page vers laquelle l'utilisateur doit être redirigé une fois le formularie validé (action du formulaire)</li>

</ol>


<h2 id="commitInsert">public static function <big><em>commitInsert</em></big>($Table,array &amp;$_POST,$estSecurise=true)</h2>
<h3>Description</h3>

<p>Cette fonction effectue l'insertion à partir des données récupérées sur un formulaire généré avec la méthode <a href="#getFormInsert" title="Voir getFormInsert">EasySQL&nbsp;:&nbsp;: getFormInsert</a>(). Vous pouvez aussi lui passer en paramètre un tableau de votre composition. </p>

<ul>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Les valeurs '' spécifiées sur une colonne null correspondent à NULL</li>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Les valeurs appartenant à des colonnes de type INT (tinyint, bigint, &hellip; ) sont automatiquement passées à la fonction intval(). </li>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Les colonnes nommées Password voient leur contenu hashé avec l'algorithme sha1() sauf si elles sont déjà encodées (taille de 40 caractères). Attention, ceci peut amener un bug&nbsp;: les mots de passe de taille 40 caractères ne sont pas hashés. </li>

</ul>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Table</strong> : la table sur laquelle effectuer l'insertion des données</li>
	<li><strong>$_POST</strong> : le tableau contenant les données à insérer ; normalement généré par getFormInsert() dans <strong>$_POST</strong> : mais vous pouvez le créer vous-même si nécessaire.</li>

	<li><strong>$estSecurise</strong> : : indique si le tableau passé en paramètre a été sécurisé pour l'insertion en BDD. Si false, les données sont modifiées avec mysql_real_escape_string() pour éviter les injections.</li>
</ol>
<h3>Exemples d'utilisation</h3>

<pre xml:lang="php">define('EASYSQL_WORKTABLE','MaTable');

//Au premier chargement, $_POST est vide et la condition est fausse.
if(isset($_POST['ajout']) && EasySQL::commitInsert(EASYSQL_WORKTABLE,$_POST))
	echo 'Enregistré.';

//Afficher le formulaire d'insertion :
EasySQL::getFormInsert(EASYSQL_WORKTABLE,'ajout');</pre>



<h2 id="commitUpdate">public static function <big><em>commitUpdate</em></big>($Table,array &amp;$_POST,$estSecurise=true)</h2>

<h3>Description</h3>

<p>Cette fonction effectue la mise à jour d'un tuple à partir des données récupérées sur un formulaire généré avec la méthode <a href="#getFormUpdate" title="Voir getFormUpdate">EasySQL&nbsp;:&nbsp;: getFormUpdate</a>(). Pour sélectionner un enregistrement à modifier, utilisez <a href="#getFormPreUpdate" title="Voir getFormPreUpdate">EasySQL&nbsp;:&nbsp;: getFormPreUpdate</a>(). </p>

<ul>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Les valeurs '' spécifiées sur une colonne null correspondent à NULL</li>

	<li><span style="color:purple;">NOTE</span>&nbsp;: Les valeurs appartenant à des colonnes de type INT (tinyint, bigint, &hellip; ) sont automatiquement passées à la fonction intval(). </li>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Les colonnes nommées Password voient leur contenu hashé avec l'algorithme sha1() sauf si elles sont déjà encodées (taille de 40 caractères). Attention, ceci peut amener un bug&nbsp;: les mots de passe de taille 40 caractères ne sont pas hashés. </li>
</ul>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Table</strong> : la table sur laquelle effectuer la mise à jour des données</li>

	<li><strong>$_POST</strong> : le tableau contenant les données à modifier ; normalement généré par getFormUpdate() dans <strong>$_POST</strong> : mais vous pouvez le créer vous-même si nécessaire.</li>
	<li><strong>$estSecurise</strong> : : indique si le tableau passé en paramètre a été sécurisé pour l'insertion en BDD. Si false, les données sont modifiées pour éviter les injections.</li>
</ol>
<h3>Exemples d'utilisation</h3>

<pre xml:lang="php">define('EASYSQL_WORKTABLE','MaTable');
//Dans une application réelle, $IdAModifier serait récupéré avec la fonction getFormPreUpdate().
$IdAModifier = 1;

//Au premier chargement, $_POST est vide et la condition est fausse.
if(isset($_POST['update']) && EasySQL::commitUpdate(EASYSQL_WORKTABLE,$_POST))
	echo 'Modifié.';

Afficher le formulaire de mise à jour :
EasySQL::getFormUpdate(EASYSQL_WORKTABLE,$IdAModifier,'update');</pre>



<h2 id="commitDelete">public static function <big><em>commitDelete</em></big>($Table,array &amp;$_POST)</h2>
<h3>Description</h3>

<p>Cette fonction effectue la suppression d'un ou plusieurs tuples à partir des données récupérées sur un formulaire généré avec la méthode <a href="#getFormDelete" title="Voir getFormDelete">EasySQL&nbsp;:&nbsp;: getFormDelete</a>(). Vous pouvez aussi construire ce tableau depuis le script si nécessaire. <br />

Attention, cette fonction supprime sans se poser de questions&nbsp;: une mauvaise utilisation videra la table sans avertissement. <br />
Pensez aussi aux contraintes de type <tt>ON DELETE CASCADE</tt> sur vos clés étrangères qui peuvent supprimer plusieurs lignes sur plusieurs tables différentes quand vous pensez n'en détruire qu'une seule. </p>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Table</strong> : la table sur laquelle effectuer la suppression des données</li>

	<li><strong>$_POST</strong> : le tableau contenant les données à modifier ; normalement généré par getFormDelete() dans <strong>$_POST</strong> : mais vous pouvez le créer vous-même si nécessaire.</li>
</ol>
<h3>Valeur de retour</h3>
<ul>
	<li>Le nombre d'enregistrements supprimés.</li>

</ul>

<h3>Exemples d'utilisation</h3>

<pre xml:lang="php">if(isset($_POST['retrait']))
	echo 'Enregistrements supprimés : ' . EasySQL::commitDelete(EASYSQL_WORKTABLE,$_POST);
EasySQL::getFormDelete(EASYSQL_WORKTABLE,'retrait');</pre>



<h2 id="getColumns">public static function <big><em>getColumns</em></big>($Table)</h2>
<h3>Description</h3>

<p>Renvoie la liste des colonnes de la table <strong>$Table</strong> passée en paramètre. <br />

Les résultats de cette fonction sont mis en cache pour la durée d'exécution du script afin de décharger le serveur. <br />
Le tableau de retour contient pour chaque clé un tableau de type <tt>Info Colonnes</tt>, soit les informations suivantes (entre parenthèses, un exemple de retour)&nbsp;: </p>

<ul>
	<li>Field, le nom du champ (<tt>ID</tt>)</li>
	<li>Type, son type (<tt>int(20)</tt>)</li>

	<li>Collation la collation si type text (<tt>latin1_german2_ci</tt>)</li>
	<li>Null, yes or no si <tt>NOT NULL</tt> (<tt>YES</tt>)</li>
	<li>Key, si la clé est primaire / unique / index (<tt>PRI</tt> ou <tt>MUL</tt> ou <tt>UNI</tt>)</li>

	<li>Default, valeur par défaut du champ (<tt>NULL</tt>)</li>
	<li>Extra, les informations supplémentaires (<tt>auto_increment</tt>)</li>
	<li>Privileges, les privilèges que l'utilisateur courant a sur la colonne (<tt>select</tt>, <tt>insert</tt>, <tt>update</tt>, <tt>references</tt>), </li>

	<li>Comment, le commentaire de la colonne. Si non spécifié, EasySQL émule un commentaire identique au nom de la colonne. </li>
	<li>[optionnel] FKON, (abréviation de ForeignKeyOn) la clé de jointure de la colonne sous la forme <tt>NomTable(EASYSQL_FOREIGN)Colonne</tt>, <a href="#EASYSQL_FOREIGN" title="Voir EASYSQL_FOREIGN">EASYSQL_FOREIGN</a> étant le séparateur utilisé [«&nbsp;.&nbsp;» par défaut] (<tt>Articles. ID</tt>)</li>
	<li>[optionnel] FKCAPTION (abréviation de ForeignKeyCaption) l'étiquette «&nbsp;user-friendly&nbsp;» à afficher à l'utilisateur de l'application en lieu et place du FKON. Si non défini (avec la méthode <a href="#setMeta" title="Voir setMeta">EasySQL&nbsp;:&nbsp;: setMeta</a>()), EasySQL l'émule à la même valeur que FKON. (<tt>Articles.Titre</tt>)</li>

</ul>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Table</strong> : la table dont on souhaite récupérer les informations de colonnes.</li>
</ol>
<h3>Valeur de retour</h3>
<ul>
	<li>Le tableau renvoyé est de la forme NomClé=>array(Infos Colonnes).</li>

</ul>


<h2 id="getAll">private static function <big><em>getAll</em></big>($Table,$OrderBy=null)</h2>
<h3>Description</h3>

<p>Fonction permettant de récupérer l'intégralité des données dans la table <strong>$Table. </strong><br />
Cette fonction agit de façon intelligente en transformant les clés étrangères numériques par leur étiquette associée si FKCAPTION a été défini avec la fonction <a href="#setMeta" title="Voir setMeta">EasySQL&nbsp;:&nbsp;: setMeta</a>(). </p>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Table</strong> : la table dont on veut récupérer les données</li>
	<li><strong>$OrderBy</strong> : l'ordre de tri, par défaut la clé primaire décroissante.</li>
</ol>


<h2 id="SQL">public static function <big><em>SQL</em></big>($SQL)</h2>
<h3>Description</h3>

<p>Procédure utilisée par toutes les fonctions d'EasySQL pour réaliser une requête au serveur SQL. <br />
En cas d'erreur, affiche la fonction SQL ayant échouée et la pile d'appel grâce à la fonction <a href="#Fail" title="Voir Fail">EasySQL&nbsp;:&nbsp;: Fail</a>(). <br />
Cette fonction est publique et peut donc être appelée depuis vos scripts. </p>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$SQL</strong> : requête SQL à exécuter</li>
</ol>


<h2 id="Fail">public static function <big><em>Fail</em></big>($Msg)</h2>
<h3>Description</h3>

<p>Fonction arrêtant le script en cas d'erreur fatale&nbsp;; quelques exemples&nbsp;: </p>

<ul>
	<li>Requête SQL incorrecte&nbsp;; </li>
	<li>Requête SQL violant une contrainte d'intégrité&nbsp;; </li>
	<li>Table inexistante&nbsp;; </li>

	<li>Demande de mise à jour d'une table sans spécifier l'ID à modifier&nbsp;; </li>
	<li>Définitions de méta paramètres incorrects. </li>
</ul>
<p>En plus d'un message d'erreur identifiant le problème, la pile d'appel des fonctions ayant mené au problème sera affichée avec les paramètres d'appels pour chaque fonction. Le script s'arrête automatiquement après. </p>

<ul>
	<li><span style="color:purple;">NOTE</span>&nbsp;: EasySQL est conçu pour être utilisé avec des gens fiables. Dans un environnement de production, vous devriez faire en sorte que le résultat de cette fonction s'enregistre dans un fichier de log avant de terminer le script sur une erreur générique. </li>
</ul>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Msg</strong> : le message à afficher</li>
</ol>


<h2 id="setMeta">public static function <big><em>setMeta</em></big>($Name,array $Valeur)</h2>
<h3>Description</h3>

<p>Permet l'introduction de méta données dans EasySQL. <br />
L'utilisation principale sera de spécifier des étiquettes de clés étrangères à afficher en lieu et place de la colonne étrangère&nbsp;: plutot que d'afficher un numéro d'identifiant peu lisible, on peut choisir une colonne associée (par exemple, le nom de l'auteur) qui remplacera l'identifiant pour chaque sortie sur l'écran. Voir l'exemple avec 'FKCAPTION'. <br />
Vous pouvez aussi ajouter des clés étrangères qui n'auraient pas été détectées automatiquement. Voir l'exemple avec 'FKON'. <br />
Enfin, vous pouvez désactiver (virtuellement) des contraintes. Notez que cela ne modifie pas le schéma de la table, juste le comportement d'EasySQL. Voir l'exemple avec 'DISABLEFKON'. </p>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$Name</strong> : le nom de la méta instruction à enregistrer. Valeurs supportées : 'FKON', 'DISABLEFKON', et 'FKCAPTION'.</li>

	<li><strong>$Valeur</strong> : un tableau avec les options. Les clés du tableau sont les tables, les valeurs sont un autre tableau dont les clés sont les colonnes et les valeurs les options.</li>
</ol>
<h3>Exemples d'utilisation</h3>

<pre xml:lang="php">//Cette commande indiquera à EasySQL que la colonne Groupe est une clé étrangère liant vers la table Groupes, colonne ID.
EasySQL::setMeta('FKON',array('Joueurs'=>array('Groupe'=>'Groupes.ID')));
//Il est inutile de préciser ces valeurs si la clé étrangère existe réellement dans votre table (avec innoDB et et ADD FOREIGN KEY).
//Il est inutile de préciser ces valeurs si votre colonne respecte la convention NomColonne = NomTableEtrangere . EASYSQL_FOREIGN . NomColonneEtrangere
//Ici, il est donc possible de renommer la colonne Groupes en Groupes_ID (si EASYSQL_FOREIGN est défini comme '_', ce qui n'est pas le cas par défaut) pour éviter l'appel à setMeta().</pre>
<pre xml:lang="php">//Cette commande désactivera la détection des clés étrangères sur les colonnes Nb_Niveau et Last_Connexion de la table Joueurs (note : cette détection n'aurait lieu que si EASYSQL_FOREIGN était défini sur '_', ce qui n'est pas le comportement par défaut !)
EasySQL::setMeta('DISABLEFKON',array('Articles'=>array('Nb_Vues'=>true,'Last_Connexion'=>true)));
// Cette commande sert principalement si votre nommage des colonnes interfère avec la détection automatique des clés étrangères.
//En cas de conflits avec 'FKON', les valeurs indiquées par 'DISABLEFKON' sont prioritaires.</pre>
<pre xml:lang="php">//Cette commande indiquera que dans la table Propositions, la colonne AjoutPar est une étiquette de clé étrangère sur la table Auteurs, colonne Auteur. Notez qu'il ne s'agit PAS de la valeur contenue dans la table (il s'agit de FKCAPTION et non FKON) mais de la valeur qui sera affichée à l'utilisateur lors des sorties écrans.
EasySQL::setMeta('FKCAPTION',array('Propositions'=>array('AjoutPar'=>'Auteurs.Auteur'));
//Si AjoutPar était une clé étrangère numérique (probablement sur Auteurs_ID), tous ses affichages à l'écran se feront avec le Auteurs.Auteur correspondant à l'Auteurs.ID.</pre>


<h2 id="getTableAndField">public static function <big><em>getTableAndField</em></big>($String)</h2>
<h3>Description</h3>

<p>Fonction séparant en deux composantes l'identifiant <strong>$String</strong> fourni&nbsp;: la table et la colonne. <br />
Si le délimiteur n'est pas trouvé, une erreur fatale est lancée. </p>

<h3>Paramètres d'appel</h3>
<ol>
	<li><strong>$String</strong> : l'identifiant à découper.</li>
</ol>
<h3>Valeur de retour</h3>
<ul>
	<li>Un tableau sous la forme array('Table'=>'NomTable','Cle'=>'NomCle')</li>

</ul>

<h3>Exemples d'utilisation</h3>

<pre xml:lang="php">define('EASYSQL_FOREIGN','.');//Normalement effectué dès le début du script, présent pour l'exemple.
print_r(EasySQL::getTableAndField('Auteurs.ID'));
//Renvoie array('Table'=>'Auteurs','Cle'=>'ID').</pre>



<h2 id="EASYSQL_PREFIXE">Constante <big><em>EASYSQL_PREFIXE</em></big></h2>
<h3>Description</h3>

<p>Le préfixe des tables. </p>

<ul>
	<li>Défaut&nbsp;: AUCUN, si non spécifié le script s'arrête. </li>
</ul>
<p>Permet de limiter les accès d'un utilisateur d'EasySQL aux tables commencant par ce préfixe. </p>

<ul>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Pour donner un accès complet à toutes les tables de la base, vous devez spécifier explicitement <tt>define(EASYSQL_PREFIXE,'')</tt></li>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Implicitement, chaque table manipulée par EasySQL se voit ajouter le préfixe <a href="#EASYSQL_PREFIXE" title="Voir EASYSQL_PREFIXE">EASYSQL_PREFIXE</a>. Pour ajouter une ligne sur la table Blog_Articles, il faudra donc appeler la fonction <tt>EasySQL::getFormInsert('Articles')</tt>, avec <tt>EASYSQL_PREFIXE</tt> défini comme 'Blog_'. </li>

	<li><span style="color:purple;">NOTE</span>&nbsp;: Attention, cette constante n'est pas protégée. C'est à vous de la remplir, ne laissez pas l'utilisateur la manipuler. </li>
</ul>

<h3>Exemples d'utilisation</h3>

<pre xml:lang="php">//Définir les autorisations sur toutes les tables commençant par 'Blog_' :
define(EASYSQL_PREFIXE,'Blog_');
include('chemin/vers/EasySQL.php');

//Afficher la liste des tables utilisables avec EasySQL dans une menu déroulant :
//Affichera les tables Blog_Articles, Blog_Auteurs, Blog_Commentaires mais pas AutreTable ou Site_Sessions.
//Dans le menu déroulant, le préfixe sera ôté (transparent pour l'utilisateur) : il verra donc les tables Articles, Auteurs, Commentaires.
EasySQL::getFormTable();</pre>
<pre xml:lang="php">define(EASYSQL_PREFIXE,'Blog_');
include('chemin/vers/EasySQL.php');

//Afficher une interface d'administration
EasySQL::getAdminInterface('Articles',array('UPDATE','DELETE'));</pre>



<h2 id="EASYSQL_MAXLENGTH">Constante <big><em>EASYSQL_MAXLENGTH</em></big></h2>

<h3>Description</h3>

<p>La taille maximum (en caractères) à afficher dans les aperçus. </p>

<ul>
	<li>Défaut&nbsp;: 200</li>
</ul>



<h2 id="EASYSQL_FOREIGN">Constante <big><em>EASYSQL_FOREIGN</em></big></h2>

<h3>Description</h3>

<p>Le caractère qui permet de séparer une clé étrangère de sa table. </p>

<ul>
	<li>Défaut&nbsp;: '. '</li>
</ul>
<p>Par exemple, un nom de colonne <tt>Articles.ID</tt> est interprété comme une clé étrangère vers la table <tt>Articles</tt>, colonne <tt>ID</tt>. </p>

<ul>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Cette constante ne devrait pas être modifiée si vos tables sont en InnoDB, car la détection des clés étrangères est alors automatique. </li>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Attention, cette constante n'est pas protégée. C'est à vous de la remplir, ne laissez pas l'utilisateur la manipuler. </li>
</ul>



<h2 id="EASYSQL_ID">Constante <big><em>EASYSQL_ID</em></big></h2>

<h3>Description</h3>

<p>Le nom de la première colonne des tables. </p>

<ul>
	<li>Défaut&nbsp;: ID</li>
</ul>
<p>Malheureusement, EasySQL ne gère pas des noms d'ID différents selon les tables (IDArticles, IDAuteurs)&nbsp;: si c'est le cas dans votre application, il faudra manier les tables une à une en modifiant le <tt>define('EASYSQL_ID','IDTable')</tt> à chaque fois. </p>

<ul>
	<li><span style="color:purple;">NOTE</span>&nbsp;: Attention, cette constante n'est pas protégée. C'est à vous de la remplir, ne laissez pas l'utilisateur la manipuler. </li>
</ul>	</div>


							</div>


<ul itemscope itemtype="https://schema.org/BreadcrumbList" class="breadcrumb">
			<li>
			You are here: &#160;
		</li>

				<li itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem" class="active">
				<span itemprop="name">
					Home				</span>
				<meta itemprop="position" content="1">
			</li>
		</ul>

					<!-- End Content -->
				</main>
									<div id="aside" class="span3">
						<!-- Begin Right Sidebar -->
						<div class="well _menu"><h3 class="page-header">Main Menu</h3><ul class="nav menu">
<li class="item-104 default current active"><a href="/" >Blog de Neamar</a></li><li class="item-103"><a href="/autres-articles" >Articles du blog</a></li><li class="item-105"><a href="/les-liens-du-jeudi" >Les liens du jeudi</a></li></ul>
</div>
						<!-- End Right Sidebar -->
					</div>
							</div>
		</div>
	</div>
	<!-- Footer -->
	<footer class="footer" role="contentinfo">
		<div class="container">
			<hr />

			<p class="pull-right">
				<a href="#" id="back-top">
					Back to Top				</a>
			</p>
			<p>
				&copy; 2024 Blog de Neamar			</p>
		</div>
	</footer>

</body>
</html>
